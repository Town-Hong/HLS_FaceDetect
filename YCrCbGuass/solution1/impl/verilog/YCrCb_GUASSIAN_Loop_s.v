// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module YCrCb_GUASSIAN_Loop_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        nor_copy2_data_stream_0_V_dout,
        nor_copy2_data_stream_0_V_empty_n,
        nor_copy2_data_stream_0_V_read,
        tmp3_dout,
        tmp3_empty_n,
        tmp3_read,
        origin_data_stream_0_V_din,
        origin_data_stream_0_V_full_n,
        origin_data_stream_0_V_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state6 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [31:0] nor_copy2_data_stream_0_V_dout;
input   nor_copy2_data_stream_0_V_empty_n;
output   nor_copy2_data_stream_0_V_read;
input  [63:0] tmp3_dout;
input   tmp3_empty_n;
output   tmp3_read;
output  [7:0] origin_data_stream_0_V_din;
input   origin_data_stream_0_V_full_n;
output   origin_data_stream_0_V_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg nor_copy2_data_stream_0_V_read;
reg tmp3_read;
reg origin_data_stream_0_V_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
reg    nor_copy2_data_stream_0_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_219;
reg    tmp3_blk_n;
reg    origin_data_stream_0_V_blk_n;
reg    ap_enable_reg_pp0_iter3;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_219;
reg   [18:0] indvar_flatten_reg_87;
reg   [63:0] tmp3_read_reg_204;
reg    ap_block_state1;
wire   [63:0] scalar_tmp3_to_int_fu_106_p1;
reg   [63:0] scalar_tmp3_to_int_reg_209;
wire   [0:0] notrhs2_fu_114_p2;
reg   [0:0] notrhs2_reg_214;
wire   [0:0] exitcond_flatten_fu_120_p2;
wire    ap_block_state2_pp0_stage0_iter0;
reg    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
reg    ap_block_state5_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_219;
wire   [18:0] indvar_flatten_next_fu_126_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] notlhs1_fu_141_p2;
reg   [0:0] notlhs1_reg_228;
reg   [0:0] ap_reg_pp0_iter1_notlhs1_reg_228;
reg   [0:0] ap_reg_pp0_iter2_notlhs1_reg_228;
wire   [63:0] tmp_76_i_fu_98_p1;
reg   [63:0] tmp_76_i_reg_233;
wire   [0:0] notlhs_fu_164_p2;
reg   [0:0] notlhs_reg_239;
wire   [0:0] notrhs_fu_170_p2;
reg   [0:0] notrhs_reg_244;
wire   [0:0] tmp_33_fu_102_p2;
reg   [0:0] tmp_33_reg_249;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_block_pp0_stage0_01001;
wire   [51:0] tmp_fu_110_p1;
wire   [10:0] tmp_29_fu_132_p4;
wire   [63:0] tmp_76_i_to_int_fu_147_p1;
wire   [10:0] tmp_s_fu_150_p4;
wire   [51:0] tmp_28_fu_160_p1;
wire   [0:0] tmp_30_fu_176_p2;
wire   [0:0] tmp_31_fu_180_p2;
wire   [0:0] tmp_32_fu_184_p2;
wire   [0:0] tmp_34_fu_190_p2;
reg    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state6;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

ImgProcess_Top_fpkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
ImgProcess_Top_fpkbM_U128(
    .din0(nor_copy2_data_stream_0_V_dout),
    .dout(tmp_76_i_fu_98_p1)
);

ImgProcess_Top_dcwdI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
ImgProcess_Top_dcwdI_U129(
    .din0(tmp_76_i_reg_233),
    .din1(tmp3_read_reg_204),
    .opcode(5'd2),
    .dout(tmp_33_fu_102_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((~((real_start == 1'b0) | (tmp3_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if ((~((real_start == 1'b0) | (tmp3_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_87 <= indvar_flatten_next_fu_126_p2;
    end else if ((~((real_start == 1'b0) | (tmp3_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_87 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_219 <= exitcond_flatten_reg_219;
        ap_reg_pp0_iter1_notlhs1_reg_228 <= notlhs1_reg_228;
        exitcond_flatten_reg_219 <= exitcond_flatten_fu_120_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter2_exitcond_flatten_reg_219 <= ap_reg_pp0_iter1_exitcond_flatten_reg_219;
        ap_reg_pp0_iter2_notlhs1_reg_228 <= ap_reg_pp0_iter1_notlhs1_reg_228;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_120_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        notlhs1_reg_228 <= notlhs1_fu_141_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter1_exitcond_flatten_reg_219 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        notlhs_reg_239 <= notlhs_fu_164_p2;
        notrhs_reg_244 <= notrhs_fu_170_p2;
        tmp_33_reg_249 <= tmp_33_fu_102_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((real_start == 1'b0) | (tmp3_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        notrhs2_reg_214 <= notrhs2_fu_114_p2;
        scalar_tmp3_to_int_reg_209 <= scalar_tmp3_to_int_fu_106_p1;
        tmp3_read_reg_204 <= tmp3_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_219 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_76_i_reg_233 <= tmp_76_i_fu_98_p1;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_120_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_219 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        nor_copy2_data_stream_0_V_blk_n = nor_copy2_data_stream_0_V_empty_n;
    end else begin
        nor_copy2_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_219 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nor_copy2_data_stream_0_V_read = 1'b1;
    end else begin
        nor_copy2_data_stream_0_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter2_exitcond_flatten_reg_219 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        origin_data_stream_0_V_blk_n = origin_data_stream_0_V_full_n;
    end else begin
        origin_data_stream_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter2_exitcond_flatten_reg_219 == 1'd0) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        origin_data_stream_0_V_write = 1'b1;
    end else begin
        origin_data_stream_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp3_blk_n = tmp3_empty_n;
    end else begin
        tmp3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((real_start == 1'b0) | (tmp3_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp3_read = 1'b1;
    end else begin
        tmp3_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (tmp3_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((exitcond_flatten_fu_120_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((exitcond_flatten_fu_120_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_00001 = (((ap_reg_pp0_iter2_exitcond_flatten_reg_219 == 1'd0) & (origin_data_stream_0_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten_reg_219 == 1'd0) & (nor_copy2_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_reg_pp0_iter2_exitcond_flatten_reg_219 == 1'd0) & (origin_data_stream_0_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten_reg_219 == 1'd0) & (nor_copy2_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_reg_pp0_iter2_exitcond_flatten_reg_219 == 1'd0) & (origin_data_stream_0_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten_reg_219 == 1'd0) & (nor_copy2_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_reg_pp0_iter2_exitcond_flatten_reg_219 == 1'd0) & (origin_data_stream_0_V_full_n == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((exitcond_flatten_reg_219 == 1'd0) & (nor_copy2_data_stream_0_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (tmp3_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_pp0_stage0_iter1 = ((exitcond_flatten_reg_219 == 1'd0) & (nor_copy2_data_stream_0_V_empty_n == 1'b0));
end

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter3 = ((ap_reg_pp0_iter2_exitcond_flatten_reg_219 == 1'd0) & (origin_data_stream_0_V_full_n == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_ready = internal_ap_ready;

assign exitcond_flatten_fu_120_p2 = ((indvar_flatten_reg_87 == 19'd345600) ? 1'b1 : 1'b0);

assign indvar_flatten_next_fu_126_p2 = (indvar_flatten_reg_87 + 19'd1);

assign notlhs1_fu_141_p2 = ((tmp_29_fu_132_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notlhs_fu_164_p2 = ((tmp_s_fu_150_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign notrhs2_fu_114_p2 = ((tmp_fu_110_p1 == 52'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_170_p2 = ((tmp_28_fu_160_p1 == 52'd0) ? 1'b1 : 1'b0);

assign origin_data_stream_0_V_din = ((tmp_34_fu_190_p2[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign scalar_tmp3_to_int_fu_106_p1 = tmp3_dout;

assign start_out = real_start;

assign tmp_28_fu_160_p1 = tmp_76_i_to_int_fu_147_p1[51:0];

assign tmp_29_fu_132_p4 = {{scalar_tmp3_to_int_reg_209[62:52]}};

assign tmp_30_fu_176_p2 = (notrhs_reg_244 | notlhs_reg_239);

assign tmp_31_fu_180_p2 = (notrhs2_reg_214 | ap_reg_pp0_iter2_notlhs1_reg_228);

assign tmp_32_fu_184_p2 = (tmp_31_fu_180_p2 & tmp_30_fu_176_p2);

assign tmp_34_fu_190_p2 = (tmp_33_reg_249 & tmp_32_fu_184_p2);

assign tmp_76_i_to_int_fu_147_p1 = tmp_76_i_reg_233;

assign tmp_fu_110_p1 = scalar_tmp3_to_int_fu_106_p1[51:0];

assign tmp_s_fu_150_p4 = {{tmp_76_i_to_int_fu_147_p1[62:52]}};

endmodule //YCrCb_GUASSIAN_Loop_s
