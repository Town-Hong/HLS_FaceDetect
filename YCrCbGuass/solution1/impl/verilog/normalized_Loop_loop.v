// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module normalized_Loop_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        max_dout,
        max_empty_n,
        max_read,
        min_dout,
        min_empty_n,
        min_read,
        sim_data_stream_V_dout,
        sim_data_stream_V_empty_n,
        sim_data_stream_V_read,
        nor_data_stream_V_din,
        nor_data_stream_V_full_n,
        nor_data_stream_V_write,
        gray_data_stream_V_din,
        gray_data_stream_V_full_n,
        gray_data_stream_V_write
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_pp0_stage0 = 8'd64;
parameter    ap_ST_fsm_state55 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] max_dout;
input   max_empty_n;
output   max_read;
input  [63:0] min_dout;
input   min_empty_n;
output   min_read;
input  [31:0] sim_data_stream_V_dout;
input   sim_data_stream_V_empty_n;
output   sim_data_stream_V_read;
output  [31:0] nor_data_stream_V_din;
input   nor_data_stream_V_full_n;
output   nor_data_stream_V_write;
output  [7:0] gray_data_stream_V_din;
input   gray_data_stream_V_full_n;
output   gray_data_stream_V_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_read;
reg min_read;
reg sim_data_stream_V_read;
reg nor_data_stream_V_write;
reg gray_data_stream_V_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    max_blk_n;
reg    min_blk_n;
reg    sim_data_stream_V_blk_n;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond_flatten_reg_332;
reg    nor_data_stream_V_blk_n;
reg    ap_enable_reg_pp0_iter47;
reg   [0:0] ap_reg_pp0_iter46_exitcond_flatten_reg_332;
reg    gray_data_stream_V_blk_n;
reg   [18:0] indvar_flatten_reg_130;
reg   [63:0] max_read_reg_317;
reg    ap_block_state1;
reg   [63:0] min_read_reg_322;
wire   [63:0] grp_fu_151_p2;
reg   [63:0] tmp_i_reg_327;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_flatten_fu_164_p2;
wire    ap_block_state7_pp0_stage0_iter0;
reg    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_state9_pp0_stage0_iter2;
wire    ap_block_state10_pp0_stage0_iter3;
wire    ap_block_state11_pp0_stage0_iter4;
wire    ap_block_state12_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
wire    ap_block_state14_pp0_stage0_iter7;
wire    ap_block_state15_pp0_stage0_iter8;
wire    ap_block_state16_pp0_stage0_iter9;
wire    ap_block_state17_pp0_stage0_iter10;
wire    ap_block_state18_pp0_stage0_iter11;
wire    ap_block_state19_pp0_stage0_iter12;
wire    ap_block_state20_pp0_stage0_iter13;
wire    ap_block_state21_pp0_stage0_iter14;
wire    ap_block_state22_pp0_stage0_iter15;
wire    ap_block_state23_pp0_stage0_iter16;
wire    ap_block_state24_pp0_stage0_iter17;
wire    ap_block_state25_pp0_stage0_iter18;
wire    ap_block_state26_pp0_stage0_iter19;
wire    ap_block_state27_pp0_stage0_iter20;
wire    ap_block_state28_pp0_stage0_iter21;
wire    ap_block_state29_pp0_stage0_iter22;
wire    ap_block_state30_pp0_stage0_iter23;
wire    ap_block_state31_pp0_stage0_iter24;
wire    ap_block_state32_pp0_stage0_iter25;
wire    ap_block_state33_pp0_stage0_iter26;
wire    ap_block_state34_pp0_stage0_iter27;
wire    ap_block_state35_pp0_stage0_iter28;
wire    ap_block_state36_pp0_stage0_iter29;
wire    ap_block_state37_pp0_stage0_iter30;
wire    ap_block_state38_pp0_stage0_iter31;
wire    ap_block_state39_pp0_stage0_iter32;
wire    ap_block_state40_pp0_stage0_iter33;
wire    ap_block_state41_pp0_stage0_iter34;
wire    ap_block_state42_pp0_stage0_iter35;
wire    ap_block_state43_pp0_stage0_iter36;
wire    ap_block_state44_pp0_stage0_iter37;
wire    ap_block_state45_pp0_stage0_iter38;
wire    ap_block_state46_pp0_stage0_iter39;
wire    ap_block_state47_pp0_stage0_iter40;
wire    ap_block_state48_pp0_stage0_iter41;
wire    ap_block_state49_pp0_stage0_iter42;
wire    ap_block_state50_pp0_stage0_iter43;
wire    ap_block_state51_pp0_stage0_iter44;
wire    ap_block_state52_pp0_stage0_iter45;
wire    ap_block_state53_pp0_stage0_iter46;
reg    ap_block_state54_pp0_stage0_iter47;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter2_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter3_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter4_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter5_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter6_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter7_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter8_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter9_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter10_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter11_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter12_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter13_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter14_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter15_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter16_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter17_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter18_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter19_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter20_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter21_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter22_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter23_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter24_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter25_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter26_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter27_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter28_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter29_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter30_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter31_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter32_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter33_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter34_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter35_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter36_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter37_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter38_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter39_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter40_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter41_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter42_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter43_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter44_exitcond_flatten_reg_332;
reg   [0:0] ap_reg_pp0_iter45_exitcond_flatten_reg_332;
wire   [18:0] indvar_flatten_next_fu_170_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [63:0] tmp_i_i_fu_144_p1;
reg   [63:0] tmp_i_i_reg_341;
reg   [63:0] tmp_26_i_i_reg_346;
reg    ap_enable_reg_pp0_iter6;
wire   [63:0] grp_fu_160_p2;
reg   [63:0] tmp_27_i_i_reg_351;
wire   [31:0] tmp_1_fu_141_p1;
reg   [31:0] tmp_1_reg_356;
reg   [31:0] ap_reg_pp0_iter39_tmp_1_reg_356;
reg   [31:0] ap_reg_pp0_iter40_tmp_1_reg_356;
reg   [31:0] ap_reg_pp0_iter41_tmp_1_reg_356;
reg   [31:0] ap_reg_pp0_iter42_tmp_1_reg_356;
reg   [31:0] ap_reg_pp0_iter43_tmp_1_reg_356;
reg   [31:0] ap_reg_pp0_iter44_tmp_1_reg_356;
reg   [31:0] ap_reg_pp0_iter45_tmp_1_reg_356;
reg   [31:0] ap_reg_pp0_iter46_tmp_1_reg_356;
wire   [63:0] tmp_29_i_i_fu_148_p1;
reg   [63:0] tmp_29_i_i_reg_362;
wire   [63:0] grp_fu_155_p2;
reg   [63:0] x_assign_reg_367;
reg   [0:0] p_Result_s_reg_372;
wire   [7:0] tmp_7_fu_297_p3;
reg   [7:0] tmp_7_reg_377;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_enable_reg_pp0_iter23;
reg    ap_enable_reg_pp0_iter24;
reg    ap_enable_reg_pp0_iter25;
reg    ap_enable_reg_pp0_iter26;
reg    ap_enable_reg_pp0_iter27;
reg    ap_enable_reg_pp0_iter28;
reg    ap_enable_reg_pp0_iter29;
reg    ap_enable_reg_pp0_iter30;
reg    ap_enable_reg_pp0_iter31;
reg    ap_enable_reg_pp0_iter32;
reg    ap_enable_reg_pp0_iter33;
reg    ap_enable_reg_pp0_iter34;
reg    ap_enable_reg_pp0_iter35;
reg    ap_enable_reg_pp0_iter36;
reg    ap_enable_reg_pp0_iter37;
reg    ap_enable_reg_pp0_iter38;
reg    ap_enable_reg_pp0_iter39;
reg    ap_enable_reg_pp0_iter40;
reg    ap_enable_reg_pp0_iter41;
reg    ap_enable_reg_pp0_iter42;
reg    ap_enable_reg_pp0_iter43;
reg    ap_enable_reg_pp0_iter44;
reg    ap_enable_reg_pp0_iter45;
reg    ap_enable_reg_pp0_iter46;
reg    ap_block_pp0_stage0_01001;
reg   [63:0] grp_fu_151_p0;
wire    ap_CS_fsm_state2;
wire   [63:0] p_Val2_s_fu_176_p1;
wire   [51:0] loc_V_1_fu_197_p1;
wire   [53:0] tmp_i_i_i_fu_201_p4;
wire   [10:0] loc_V_fu_187_p4;
wire   [11:0] tmp_i_i_i_cast_i_fu_215_p1;
wire   [11:0] sh_assign_fu_219_p2;
wire   [10:0] tmp_59_i_i_i_fu_233_p2;
wire   [0:0] isNeg_fu_225_p3;
wire  signed [11:0] tmp_59_i_i_cast_i_fu_239_p1;
wire   [11:0] sh_assign_1_fu_243_p3;
wire  signed [31:0] sh_assign_1_i_i_cast_fu_251_p1;
wire   [53:0] tmp_60_i_i_cast_i_fu_259_p1;
wire   [136:0] tmp_i_i_cast_i_fu_211_p1;
wire   [136:0] tmp_60_i_i_i_fu_255_p1;
wire   [53:0] tmp_61_i_i_i_fu_263_p2;
wire   [0:0] tmp_19_fu_275_p3;
wire   [136:0] tmp_62_i_i_i_fu_269_p2;
wire   [7:0] tmp_5_fu_283_p1;
wire   [7:0] tmp_6_fu_287_p4;
wire   [7:0] p_Val2_i_i_i_fu_305_p2;
reg    grp_fu_151_ce;
wire    ap_CS_fsm_state55;
reg    grp_fu_155_ce;
reg    grp_fu_160_ce;
reg   [7:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter47 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_enable_reg_pp0_iter23 = 1'b0;
#0 ap_enable_reg_pp0_iter24 = 1'b0;
#0 ap_enable_reg_pp0_iter25 = 1'b0;
#0 ap_enable_reg_pp0_iter26 = 1'b0;
#0 ap_enable_reg_pp0_iter27 = 1'b0;
#0 ap_enable_reg_pp0_iter28 = 1'b0;
#0 ap_enable_reg_pp0_iter29 = 1'b0;
#0 ap_enable_reg_pp0_iter30 = 1'b0;
#0 ap_enable_reg_pp0_iter31 = 1'b0;
#0 ap_enable_reg_pp0_iter32 = 1'b0;
#0 ap_enable_reg_pp0_iter33 = 1'b0;
#0 ap_enable_reg_pp0_iter34 = 1'b0;
#0 ap_enable_reg_pp0_iter35 = 1'b0;
#0 ap_enable_reg_pp0_iter36 = 1'b0;
#0 ap_enable_reg_pp0_iter37 = 1'b0;
#0 ap_enable_reg_pp0_iter38 = 1'b0;
#0 ap_enable_reg_pp0_iter39 = 1'b0;
#0 ap_enable_reg_pp0_iter40 = 1'b0;
#0 ap_enable_reg_pp0_iter41 = 1'b0;
#0 ap_enable_reg_pp0_iter42 = 1'b0;
#0 ap_enable_reg_pp0_iter43 = 1'b0;
#0 ap_enable_reg_pp0_iter44 = 1'b0;
#0 ap_enable_reg_pp0_iter45 = 1'b0;
#0 ap_enable_reg_pp0_iter46 = 1'b0;
end

ImgProcess_Top_fpfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 64 ),
    .dout_WIDTH( 32 ))
ImgProcess_Top_fpfYi_U75(
    .din0(tmp_27_i_i_reg_351),
    .dout(tmp_1_fu_141_p1)
);

ImgProcess_Top_fpkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
ImgProcess_Top_fpkbM_U76(
    .din0(sim_data_stream_V_dout),
    .dout(tmp_i_i_fu_144_p1)
);

ImgProcess_Top_fpkbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
ImgProcess_Top_fpkbM_U77(
    .din0(tmp_1_reg_356),
    .dout(tmp_29_i_i_fu_148_p1)
);

ImgProcess_Top_dslbW #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ImgProcess_Top_dslbW_U78(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_151_p0),
    .din1(min_read_reg_322),
    .ce(grp_fu_151_ce),
    .dout(grp_fu_151_p2)
);

ImgProcess_Top_dmhbi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ImgProcess_Top_dmhbi_U79(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_29_i_i_reg_362),
    .din1(64'd4643176031446892544),
    .ce(grp_fu_155_ce),
    .dout(grp_fu_155_p2)
);

ImgProcess_Top_ddmb6 #(
    .ID( 1 ),
    .NUM_STAGE( 31 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
ImgProcess_Top_ddmb6_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_26_i_i_reg_346),
    .din1(tmp_i_reg_327),
    .ce(grp_fu_160_ce),
    .dout(grp_fu_160_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state55)) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state7))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state7)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state7);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter23 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter24 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter25 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter26 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter27 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter28 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter29 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter30 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter31 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter32 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter33 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter34 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter35 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter36 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter37 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter38 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter39 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter40 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter41 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter42 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter43 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter44 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter45 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter46 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter47 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            ap_enable_reg_pp0_iter47 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_fu_164_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_130 <= indvar_flatten_next_fu_170_p2;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten_reg_130 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_reg_pp0_iter10_exitcond_flatten_reg_332 <= ap_reg_pp0_iter9_exitcond_flatten_reg_332;
        ap_reg_pp0_iter11_exitcond_flatten_reg_332 <= ap_reg_pp0_iter10_exitcond_flatten_reg_332;
        ap_reg_pp0_iter12_exitcond_flatten_reg_332 <= ap_reg_pp0_iter11_exitcond_flatten_reg_332;
        ap_reg_pp0_iter13_exitcond_flatten_reg_332 <= ap_reg_pp0_iter12_exitcond_flatten_reg_332;
        ap_reg_pp0_iter14_exitcond_flatten_reg_332 <= ap_reg_pp0_iter13_exitcond_flatten_reg_332;
        ap_reg_pp0_iter15_exitcond_flatten_reg_332 <= ap_reg_pp0_iter14_exitcond_flatten_reg_332;
        ap_reg_pp0_iter16_exitcond_flatten_reg_332 <= ap_reg_pp0_iter15_exitcond_flatten_reg_332;
        ap_reg_pp0_iter17_exitcond_flatten_reg_332 <= ap_reg_pp0_iter16_exitcond_flatten_reg_332;
        ap_reg_pp0_iter18_exitcond_flatten_reg_332 <= ap_reg_pp0_iter17_exitcond_flatten_reg_332;
        ap_reg_pp0_iter19_exitcond_flatten_reg_332 <= ap_reg_pp0_iter18_exitcond_flatten_reg_332;
        ap_reg_pp0_iter20_exitcond_flatten_reg_332 <= ap_reg_pp0_iter19_exitcond_flatten_reg_332;
        ap_reg_pp0_iter21_exitcond_flatten_reg_332 <= ap_reg_pp0_iter20_exitcond_flatten_reg_332;
        ap_reg_pp0_iter22_exitcond_flatten_reg_332 <= ap_reg_pp0_iter21_exitcond_flatten_reg_332;
        ap_reg_pp0_iter23_exitcond_flatten_reg_332 <= ap_reg_pp0_iter22_exitcond_flatten_reg_332;
        ap_reg_pp0_iter24_exitcond_flatten_reg_332 <= ap_reg_pp0_iter23_exitcond_flatten_reg_332;
        ap_reg_pp0_iter25_exitcond_flatten_reg_332 <= ap_reg_pp0_iter24_exitcond_flatten_reg_332;
        ap_reg_pp0_iter26_exitcond_flatten_reg_332 <= ap_reg_pp0_iter25_exitcond_flatten_reg_332;
        ap_reg_pp0_iter27_exitcond_flatten_reg_332 <= ap_reg_pp0_iter26_exitcond_flatten_reg_332;
        ap_reg_pp0_iter28_exitcond_flatten_reg_332 <= ap_reg_pp0_iter27_exitcond_flatten_reg_332;
        ap_reg_pp0_iter29_exitcond_flatten_reg_332 <= ap_reg_pp0_iter28_exitcond_flatten_reg_332;
        ap_reg_pp0_iter2_exitcond_flatten_reg_332 <= ap_reg_pp0_iter1_exitcond_flatten_reg_332;
        ap_reg_pp0_iter30_exitcond_flatten_reg_332 <= ap_reg_pp0_iter29_exitcond_flatten_reg_332;
        ap_reg_pp0_iter31_exitcond_flatten_reg_332 <= ap_reg_pp0_iter30_exitcond_flatten_reg_332;
        ap_reg_pp0_iter32_exitcond_flatten_reg_332 <= ap_reg_pp0_iter31_exitcond_flatten_reg_332;
        ap_reg_pp0_iter33_exitcond_flatten_reg_332 <= ap_reg_pp0_iter32_exitcond_flatten_reg_332;
        ap_reg_pp0_iter34_exitcond_flatten_reg_332 <= ap_reg_pp0_iter33_exitcond_flatten_reg_332;
        ap_reg_pp0_iter35_exitcond_flatten_reg_332 <= ap_reg_pp0_iter34_exitcond_flatten_reg_332;
        ap_reg_pp0_iter36_exitcond_flatten_reg_332 <= ap_reg_pp0_iter35_exitcond_flatten_reg_332;
        ap_reg_pp0_iter37_exitcond_flatten_reg_332 <= ap_reg_pp0_iter36_exitcond_flatten_reg_332;
        ap_reg_pp0_iter38_exitcond_flatten_reg_332 <= ap_reg_pp0_iter37_exitcond_flatten_reg_332;
        ap_reg_pp0_iter39_exitcond_flatten_reg_332 <= ap_reg_pp0_iter38_exitcond_flatten_reg_332;
        ap_reg_pp0_iter39_tmp_1_reg_356 <= tmp_1_reg_356;
        ap_reg_pp0_iter3_exitcond_flatten_reg_332 <= ap_reg_pp0_iter2_exitcond_flatten_reg_332;
        ap_reg_pp0_iter40_exitcond_flatten_reg_332 <= ap_reg_pp0_iter39_exitcond_flatten_reg_332;
        ap_reg_pp0_iter40_tmp_1_reg_356 <= ap_reg_pp0_iter39_tmp_1_reg_356;
        ap_reg_pp0_iter41_exitcond_flatten_reg_332 <= ap_reg_pp0_iter40_exitcond_flatten_reg_332;
        ap_reg_pp0_iter41_tmp_1_reg_356 <= ap_reg_pp0_iter40_tmp_1_reg_356;
        ap_reg_pp0_iter42_exitcond_flatten_reg_332 <= ap_reg_pp0_iter41_exitcond_flatten_reg_332;
        ap_reg_pp0_iter42_tmp_1_reg_356 <= ap_reg_pp0_iter41_tmp_1_reg_356;
        ap_reg_pp0_iter43_exitcond_flatten_reg_332 <= ap_reg_pp0_iter42_exitcond_flatten_reg_332;
        ap_reg_pp0_iter43_tmp_1_reg_356 <= ap_reg_pp0_iter42_tmp_1_reg_356;
        ap_reg_pp0_iter44_exitcond_flatten_reg_332 <= ap_reg_pp0_iter43_exitcond_flatten_reg_332;
        ap_reg_pp0_iter44_tmp_1_reg_356 <= ap_reg_pp0_iter43_tmp_1_reg_356;
        ap_reg_pp0_iter45_exitcond_flatten_reg_332 <= ap_reg_pp0_iter44_exitcond_flatten_reg_332;
        ap_reg_pp0_iter45_tmp_1_reg_356 <= ap_reg_pp0_iter44_tmp_1_reg_356;
        ap_reg_pp0_iter46_exitcond_flatten_reg_332 <= ap_reg_pp0_iter45_exitcond_flatten_reg_332;
        ap_reg_pp0_iter46_tmp_1_reg_356 <= ap_reg_pp0_iter45_tmp_1_reg_356;
        ap_reg_pp0_iter4_exitcond_flatten_reg_332 <= ap_reg_pp0_iter3_exitcond_flatten_reg_332;
        ap_reg_pp0_iter5_exitcond_flatten_reg_332 <= ap_reg_pp0_iter4_exitcond_flatten_reg_332;
        ap_reg_pp0_iter6_exitcond_flatten_reg_332 <= ap_reg_pp0_iter5_exitcond_flatten_reg_332;
        ap_reg_pp0_iter7_exitcond_flatten_reg_332 <= ap_reg_pp0_iter6_exitcond_flatten_reg_332;
        ap_reg_pp0_iter8_exitcond_flatten_reg_332 <= ap_reg_pp0_iter7_exitcond_flatten_reg_332;
        ap_reg_pp0_iter9_exitcond_flatten_reg_332 <= ap_reg_pp0_iter8_exitcond_flatten_reg_332;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_reg_pp0_iter1_exitcond_flatten_reg_332 <= exitcond_flatten_reg_332;
        exitcond_flatten_reg_332 <= exitcond_flatten_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((min_empty_n == 1'b0) | (max_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        max_read_reg_317 <= max_dout;
        min_read_reg_322 <= min_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter45_exitcond_flatten_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        p_Result_s_reg_372 <= p_Val2_s_fu_176_p1[32'd63];
        tmp_7_reg_377 <= tmp_7_fu_297_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter37_exitcond_flatten_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_1_reg_356 <= tmp_1_fu_141_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter5_exitcond_flatten_reg_332 == 1'd0) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_26_i_i_reg_346 <= grp_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter36_exitcond_flatten_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_27_i_i_reg_351 <= grp_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter38_exitcond_flatten_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_29_i_i_reg_362 <= tmp_29_i_i_fu_148_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_flatten_reg_332 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        tmp_i_i_reg_341 <= tmp_i_i_fu_144_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_i_reg_327 <= grp_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_reg_pp0_iter44_exitcond_flatten_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        x_assign_reg_367 <= grp_fu_155_p2;
    end
end

always @ (*) begin
    if ((exitcond_flatten_fu_164_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter47 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter46 == 1'b0) & (ap_enable_reg_pp0_iter45 == 1'b0) & (ap_enable_reg_pp0_iter44 == 1'b0) & (ap_enable_reg_pp0_iter43 == 1'b0) & (ap_enable_reg_pp0_iter42 == 1'b0) & (ap_enable_reg_pp0_iter41 == 1'b0) & (ap_enable_reg_pp0_iter40 == 1'b0) & (ap_enable_reg_pp0_iter39 == 1'b0) & (ap_enable_reg_pp0_iter38 == 1'b0) & (ap_enable_reg_pp0_iter37 == 1'b0) & (ap_enable_reg_pp0_iter36 == 1'b0) & (ap_enable_reg_pp0_iter35 == 1'b0) & (ap_enable_reg_pp0_iter34 == 1'b0) & (ap_enable_reg_pp0_iter33 == 1'b0) & (ap_enable_reg_pp0_iter32 == 1'b0) & (ap_enable_reg_pp0_iter31 == 1'b0) & (ap_enable_reg_pp0_iter30 == 1'b0) & (ap_enable_reg_pp0_iter29 == 1'b0) & (ap_enable_reg_pp0_iter28 == 1'b0) & (ap_enable_reg_pp0_iter27 == 1'b0) & (ap_enable_reg_pp0_iter26 == 1'b0) & (ap_enable_reg_pp0_iter25 == 1'b0) & (ap_enable_reg_pp0_iter24 == 1'b0) & (ap_enable_reg_pp0_iter23 == 1'b0) & (ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter47 == 1'b1))) begin
        gray_data_stream_V_blk_n = gray_data_stream_V_full_n;
    end else begin
        gray_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 == 1'd0) & (ap_enable_reg_pp0_iter47 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        gray_data_stream_V_write = 1'b1;
    end else begin
        gray_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state1) | ((1'b1 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_151_ce = 1'b0;
    end else begin
        grp_fu_151_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_151_p0 = tmp_i_i_reg_341;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_151_p0 = max_read_reg_317;
    end else begin
        grp_fu_151_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_155_ce = 1'b1;
    end else begin
        grp_fu_155_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_160_ce = 1'b1;
    end else begin
        grp_fu_160_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        max_blk_n = max_empty_n;
    end else begin
        max_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((min_empty_n == 1'b0) | (max_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        max_read = 1'b1;
    end else begin
        max_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        min_blk_n = min_empty_n;
    end else begin
        min_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((min_empty_n == 1'b0) | (max_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        min_read = 1'b1;
    end else begin
        min_read = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter47 == 1'b1))) begin
        nor_data_stream_V_blk_n = nor_data_stream_V_full_n;
    end else begin
        nor_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 == 1'd0) & (ap_enable_reg_pp0_iter47 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        nor_data_stream_V_write = 1'b1;
    end else begin
        nor_data_stream_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_332 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sim_data_stream_V_blk_n = sim_data_stream_V_empty_n;
    end else begin
        sim_data_stream_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((exitcond_flatten_reg_332 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sim_data_stream_V_read = 1'b1;
    end else begin
        sim_data_stream_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((min_empty_n == 1'b0) | (max_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_164_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter46 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter47 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter46 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter47 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_flatten_fu_164_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter47 == 1'b1) & (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 == 1'd0) & (gray_data_stream_V_full_n == 1'b0)) | ((ap_reg_pp0_iter46_exitcond_flatten_reg_332 == 1'd0) & (nor_data_stream_V_full_n == 1'b0)))) | ((exitcond_flatten_reg_332 == 1'd0) & (sim_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter47 == 1'b1) & (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 == 1'd0) & (gray_data_stream_V_full_n == 1'b0)) | ((ap_reg_pp0_iter46_exitcond_flatten_reg_332 == 1'd0) & (nor_data_stream_V_full_n == 1'b0)))) | ((exitcond_flatten_reg_332 == 1'd0) & (sim_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter47 == 1'b1) & (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 == 1'd0) & (gray_data_stream_V_full_n == 1'b0)) | ((ap_reg_pp0_iter46_exitcond_flatten_reg_332 == 1'd0) & (nor_data_stream_V_full_n == 1'b0)))) | ((exitcond_flatten_reg_332 == 1'd0) & (sim_data_stream_V_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((min_empty_n == 1'b0) | (max_empty_n == 1'b0) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter23 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter24 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage0_iter25 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage0_iter26 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter27 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage0_iter28 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage0_iter29 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage0_iter30 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage0_iter31 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage0_iter32 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage0_iter33 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage0_iter34 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage0_iter35 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter36 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage0_iter37 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage0_iter38 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage0_iter39 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage0_iter40 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage0_iter41 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage0_iter42 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter43 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage0_iter44 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage0_iter45 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage0_iter46 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state54_pp0_stage0_iter47 = (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 == 1'd0) & (gray_data_stream_V_full_n == 1'b0)) | ((ap_reg_pp0_iter46_exitcond_flatten_reg_332 == 1'd0) & (nor_data_stream_V_full_n == 1'b0)));
end

assign ap_block_state7_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_pp0_stage0_iter1 = ((exitcond_flatten_reg_332 == 1'd0) & (sim_data_stream_V_empty_n == 1'b0));
end

assign ap_block_state9_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond_flatten_fu_164_p2 = ((indvar_flatten_reg_130 == 19'd345600) ? 1'b1 : 1'b0);

assign gray_data_stream_V_din = ((p_Result_s_reg_372[0:0] === 1'b1) ? p_Val2_i_i_i_fu_305_p2 : tmp_7_reg_377);

assign indvar_flatten_next_fu_170_p2 = (indvar_flatten_reg_130 + 19'd1);

assign isNeg_fu_225_p3 = sh_assign_fu_219_p2[32'd11];

assign loc_V_1_fu_197_p1 = p_Val2_s_fu_176_p1[51:0];

assign loc_V_fu_187_p4 = {{p_Val2_s_fu_176_p1[62:52]}};

assign nor_data_stream_V_din = ap_reg_pp0_iter46_tmp_1_reg_356;

assign p_Val2_i_i_i_fu_305_p2 = (8'd0 - tmp_7_reg_377);

assign p_Val2_s_fu_176_p1 = x_assign_reg_367;

assign sh_assign_1_fu_243_p3 = ((isNeg_fu_225_p3[0:0] === 1'b1) ? tmp_59_i_i_cast_i_fu_239_p1 : sh_assign_fu_219_p2);

assign sh_assign_1_i_i_cast_fu_251_p1 = $signed(sh_assign_1_fu_243_p3);

assign sh_assign_fu_219_p2 = ($signed(12'd3073) + $signed(tmp_i_i_i_cast_i_fu_215_p1));

assign tmp_19_fu_275_p3 = tmp_61_i_i_i_fu_263_p2[32'd53];

assign tmp_59_i_i_cast_i_fu_239_p1 = $signed(tmp_59_i_i_i_fu_233_p2);

assign tmp_59_i_i_i_fu_233_p2 = (11'd1023 - loc_V_fu_187_p4);

assign tmp_5_fu_283_p1 = tmp_19_fu_275_p3;

assign tmp_60_i_i_cast_i_fu_259_p1 = $unsigned(sh_assign_1_i_i_cast_fu_251_p1);

assign tmp_60_i_i_i_fu_255_p1 = $unsigned(sh_assign_1_i_i_cast_fu_251_p1);

assign tmp_61_i_i_i_fu_263_p2 = tmp_i_i_i_fu_201_p4 >> tmp_60_i_i_cast_i_fu_259_p1;

assign tmp_62_i_i_i_fu_269_p2 = tmp_i_i_cast_i_fu_211_p1 << tmp_60_i_i_i_fu_255_p1;

assign tmp_6_fu_287_p4 = {{tmp_62_i_i_i_fu_269_p2[60:53]}};

assign tmp_7_fu_297_p3 = ((isNeg_fu_225_p3[0:0] === 1'b1) ? tmp_5_fu_283_p1 : tmp_6_fu_287_p4);

assign tmp_i_i_cast_i_fu_211_p1 = tmp_i_i_i_fu_201_p4;

assign tmp_i_i_i_cast_i_fu_215_p1 = loc_V_fu_187_p4;

assign tmp_i_i_i_fu_201_p4 = {{{{1'd1}, {loc_V_1_fu_197_p1}}}, {1'd0}};

endmodule //normalized_Loop_loop
