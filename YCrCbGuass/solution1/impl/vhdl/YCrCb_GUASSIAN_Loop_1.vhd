-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity YCrCb_GUASSIAN_Loop_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    Cr_Img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    Cr_Img_data_stream_0_V_empty_n : IN STD_LOGIC;
    Cr_Img_data_stream_0_V_read : OUT STD_LOGIC;
    Cb_Img_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    Cb_Img_data_stream_0_V_empty_n : IN STD_LOGIC;
    Cb_Img_data_stream_0_V_read : OUT STD_LOGIC;
    Sim_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    Sim_data_stream_0_V_full_n : IN STD_LOGIC;
    Sim_data_stream_0_V_write : OUT STD_LOGIC );
end;


architecture behav of YCrCb_GUASSIAN_Loop_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv64_C05D5B9F559B3D08 : STD_LOGIC_VECTOR (63 downto 0) := "1100000001011101010110111001111101010101100110110011110100001000";
    constant ap_const_lv64_C06391EAB367A0F9 : STD_LOGIC_VECTOR (63 downto 0) := "1100000001100011100100011110101010110011011001111010000011111001";
    constant ap_const_lv64_40640429C779A6B5 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001100100000001000010100111000111011110011010011010110101";
    constant ap_const_lv64_C02849374BC6A7F0 : STD_LOGIC_VECTOR (63 downto 0) := "1100000000101000010010010011011101001011110001101010011111110000";
    constant ap_const_lv64_4072B75182A9930C : STD_LOGIC_VECTOR (63 downto 0) := "0100000001110010101101110101000110000010101010011001001100001100";
    constant ap_const_lv64_BEE5EF40E25444A3 : STD_LOGIC_VECTOR (63 downto 0) := "1011111011100101111011110100000011100010010101000100010010100011";
    constant ap_const_lv19_54600 : STD_LOGIC_VECTOR (18 downto 0) := "1010100011000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal Cr_Img_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal Cb_Img_data_stream_0_V_blk_n : STD_LOGIC;
    signal Sim_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter60 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter59_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_85 : STD_LOGIC_VECTOR (18 downto 0);
    signal exitcond_flatten_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter48 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter49 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter50 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter51 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter52 : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter53 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter54 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter55 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter56 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter57 : BOOLEAN;
    signal ap_block_state60_pp0_stage0_iter58 : BOOLEAN;
    signal ap_block_state61_pp0_stage0_iter59 : BOOLEAN;
    signal ap_block_state62_pp0_stage0_iter60 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter18_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter19_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter20_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter21_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter22_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter23_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter24_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter25_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter26_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter27_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter28_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter29_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter30_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter31_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter32_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter33_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter34_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter35_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter36_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter37_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter38_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter39_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter40_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter41_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter42_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter43_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter44_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter45_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter46_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter47_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter48_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter49_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter50_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter51_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter52_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter53_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter54_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter55_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter56_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter57_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter58_exitcond_flatten_reg_185 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_171_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_reg_194 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_reg_199 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_154_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cr_reg_214 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cb_reg_219 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_99_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter13_tmp_s_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter14_tmp_s_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter15_tmp_s_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter16_tmp_s_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter17_tmp_s_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter18_tmp_s_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter19_tmp_s_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter20_tmp_s_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter21_tmp_s_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter22_tmp_s_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter23_tmp_s_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_104_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_reg_231 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter13_tmp_17_reg_231 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter14_tmp_17_reg_231 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter15_tmp_17_reg_231 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter16_tmp_17_reg_231 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter17_tmp_17_reg_231 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter18_tmp_17_reg_231 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter19_tmp_17_reg_231 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter20_tmp_17_reg_231 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter21_tmp_17_reg_231 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter22_tmp_17_reg_231 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_pp0_iter23_tmp_17_reg_231 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_121_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_reg_238 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_126_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_reg_243 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_131_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_reg_248 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_136_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_reg_253 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_109_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_258 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_113_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_263 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_141_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_reg_268 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_145_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_24_reg_273 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_117_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_reg_278 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_149_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal res_reg_283 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_reg_288 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_10_fu_96_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter50 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter51 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter52 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter53 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter54 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter55 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter56 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter57 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter58 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter59 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_154_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_157_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_99_ce : STD_LOGIC;
    signal grp_fu_104_ce : STD_LOGIC;
    signal grp_fu_109_ce : STD_LOGIC;
    signal grp_fu_113_ce : STD_LOGIC;
    signal grp_fu_117_ce : STD_LOGIC;
    signal grp_fu_121_ce : STD_LOGIC;
    signal grp_fu_126_ce : STD_LOGIC;
    signal grp_fu_131_ce : STD_LOGIC;
    signal grp_fu_136_ce : STD_LOGIC;
    signal grp_fu_141_ce : STD_LOGIC;
    signal grp_fu_145_ce : STD_LOGIC;
    signal grp_fu_149_ce : STD_LOGIC;
    signal grp_fu_154_ce : STD_LOGIC;
    signal grp_fu_157_ce : STD_LOGIC;
    signal grp_fu_160_ce : STD_LOGIC;
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component ImgProcess_Top_fpfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ImgProcess_Top_dag8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ImgProcess_Top_dmhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ImgProcess_Top_uiibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ImgProcess_Top_dejbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    ImgProcess_Top_fpfYi_U40 : component ImgProcess_Top_fpfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_11_reg_288,
        dout => tmp_10_fu_96_p1);

    ImgProcess_Top_dag8j_U41 : component ImgProcess_Top_dag8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cr_reg_214,
        din1 => ap_const_lv64_C05D5B9F559B3D08,
        ce => grp_fu_99_ce,
        dout => grp_fu_99_p2);

    ImgProcess_Top_dag8j_U42 : component ImgProcess_Top_dag8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cb_reg_219,
        din1 => ap_const_lv64_C06391EAB367A0F9,
        ce => grp_fu_104_ce,
        dout => grp_fu_104_p2);

    ImgProcess_Top_dag8j_U43 : component ImgProcess_Top_dag8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_16_reg_238,
        din1 => tmp_18_reg_243,
        ce => grp_fu_109_ce,
        dout => grp_fu_109_p2);

    ImgProcess_Top_dag8j_U44 : component ImgProcess_Top_dag8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_21_reg_248,
        din1 => tmp_22_reg_253,
        ce => grp_fu_113_ce,
        dout => grp_fu_113_p2);

    ImgProcess_Top_dag8j_U45 : component ImgProcess_Top_dag8j
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_20_reg_268,
        din1 => tmp_24_reg_273,
        ce => grp_fu_117_ce,
        dout => grp_fu_117_p2);

    ImgProcess_Top_dmhbi_U46 : component ImgProcess_Top_dmhbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_224,
        din1 => ap_const_lv64_40640429C779A6B5,
        ce => grp_fu_121_ce,
        dout => grp_fu_121_p2);

    ImgProcess_Top_dmhbi_U47 : component ImgProcess_Top_dmhbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_17_reg_231,
        din1 => ap_const_lv64_C02849374BC6A7F0,
        ce => grp_fu_126_ce,
        dout => grp_fu_126_p2);

    ImgProcess_Top_dmhbi_U48 : component ImgProcess_Top_dmhbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_224,
        din1 => ap_const_lv64_C02849374BC6A7F0,
        ce => grp_fu_131_ce,
        dout => grp_fu_131_p2);

    ImgProcess_Top_dmhbi_U49 : component ImgProcess_Top_dmhbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_17_reg_231,
        din1 => ap_const_lv64_4072B75182A9930C,
        ce => grp_fu_136_ce,
        dout => grp_fu_136_p2);

    ImgProcess_Top_dmhbi_U50 : component ImgProcess_Top_dmhbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_19_reg_258,
        din1 => ap_reg_pp0_iter23_tmp_s_reg_224,
        ce => grp_fu_141_ce,
        dout => grp_fu_141_p2);

    ImgProcess_Top_dmhbi_U51 : component ImgProcess_Top_dmhbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_23_reg_263,
        din1 => ap_reg_pp0_iter23_tmp_17_reg_231,
        ce => grp_fu_145_ce,
        dout => grp_fu_145_p2);

    ImgProcess_Top_dmhbi_U52 : component ImgProcess_Top_dmhbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_25_reg_278,
        din1 => ap_const_lv64_BEE5EF40E25444A3,
        ce => grp_fu_149_ce,
        dout => grp_fu_149_p2);

    ImgProcess_Top_uiibs_U53 : component ImgProcess_Top_uiibs
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_154_p0,
        ce => grp_fu_154_ce,
        dout => grp_fu_154_p1);

    ImgProcess_Top_uiibs_U54 : component ImgProcess_Top_uiibs
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_157_p0,
        ce => grp_fu_157_ce,
        dout => grp_fu_157_p1);

    ImgProcess_Top_dejbC_U55 : component ImgProcess_Top_dejbC
    generic map (
        ID => 1,
        NUM_STAGE => 18,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_0,
        din1 => res_reg_283,
        ce => grp_fu_160_ce,
        dout => grp_fu_160_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter50_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter50 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter50 <= ap_enable_reg_pp0_iter49;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter51_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter51 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter51 <= ap_enable_reg_pp0_iter50;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter52_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter52 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter52 <= ap_enable_reg_pp0_iter51;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter53_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter53 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter53 <= ap_enable_reg_pp0_iter52;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter54_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter54 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter54 <= ap_enable_reg_pp0_iter53;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter55_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter55 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter55 <= ap_enable_reg_pp0_iter54;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter56_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter56 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter56 <= ap_enable_reg_pp0_iter55;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter57_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter57 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter57 <= ap_enable_reg_pp0_iter56;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter58_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter58 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter58 <= ap_enable_reg_pp0_iter57;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter59_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter59 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter59 <= ap_enable_reg_pp0_iter58;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter60_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter60 <= ap_enable_reg_pp0_iter59;
                elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter60 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_165_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_85 <= indvar_flatten_next_fu_171_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_85 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter10_exitcond_flatten_reg_185 <= ap_reg_pp0_iter9_exitcond_flatten_reg_185;
                ap_reg_pp0_iter11_exitcond_flatten_reg_185 <= ap_reg_pp0_iter10_exitcond_flatten_reg_185;
                ap_reg_pp0_iter12_exitcond_flatten_reg_185 <= ap_reg_pp0_iter11_exitcond_flatten_reg_185;
                ap_reg_pp0_iter13_exitcond_flatten_reg_185 <= ap_reg_pp0_iter12_exitcond_flatten_reg_185;
                ap_reg_pp0_iter13_tmp_17_reg_231 <= tmp_17_reg_231;
                ap_reg_pp0_iter13_tmp_s_reg_224 <= tmp_s_reg_224;
                ap_reg_pp0_iter14_exitcond_flatten_reg_185 <= ap_reg_pp0_iter13_exitcond_flatten_reg_185;
                ap_reg_pp0_iter14_tmp_17_reg_231 <= ap_reg_pp0_iter13_tmp_17_reg_231;
                ap_reg_pp0_iter14_tmp_s_reg_224 <= ap_reg_pp0_iter13_tmp_s_reg_224;
                ap_reg_pp0_iter15_exitcond_flatten_reg_185 <= ap_reg_pp0_iter14_exitcond_flatten_reg_185;
                ap_reg_pp0_iter15_tmp_17_reg_231 <= ap_reg_pp0_iter14_tmp_17_reg_231;
                ap_reg_pp0_iter15_tmp_s_reg_224 <= ap_reg_pp0_iter14_tmp_s_reg_224;
                ap_reg_pp0_iter16_exitcond_flatten_reg_185 <= ap_reg_pp0_iter15_exitcond_flatten_reg_185;
                ap_reg_pp0_iter16_tmp_17_reg_231 <= ap_reg_pp0_iter15_tmp_17_reg_231;
                ap_reg_pp0_iter16_tmp_s_reg_224 <= ap_reg_pp0_iter15_tmp_s_reg_224;
                ap_reg_pp0_iter17_exitcond_flatten_reg_185 <= ap_reg_pp0_iter16_exitcond_flatten_reg_185;
                ap_reg_pp0_iter17_tmp_17_reg_231 <= ap_reg_pp0_iter16_tmp_17_reg_231;
                ap_reg_pp0_iter17_tmp_s_reg_224 <= ap_reg_pp0_iter16_tmp_s_reg_224;
                ap_reg_pp0_iter18_exitcond_flatten_reg_185 <= ap_reg_pp0_iter17_exitcond_flatten_reg_185;
                ap_reg_pp0_iter18_tmp_17_reg_231 <= ap_reg_pp0_iter17_tmp_17_reg_231;
                ap_reg_pp0_iter18_tmp_s_reg_224 <= ap_reg_pp0_iter17_tmp_s_reg_224;
                ap_reg_pp0_iter19_exitcond_flatten_reg_185 <= ap_reg_pp0_iter18_exitcond_flatten_reg_185;
                ap_reg_pp0_iter19_tmp_17_reg_231 <= ap_reg_pp0_iter18_tmp_17_reg_231;
                ap_reg_pp0_iter19_tmp_s_reg_224 <= ap_reg_pp0_iter18_tmp_s_reg_224;
                ap_reg_pp0_iter20_exitcond_flatten_reg_185 <= ap_reg_pp0_iter19_exitcond_flatten_reg_185;
                ap_reg_pp0_iter20_tmp_17_reg_231 <= ap_reg_pp0_iter19_tmp_17_reg_231;
                ap_reg_pp0_iter20_tmp_s_reg_224 <= ap_reg_pp0_iter19_tmp_s_reg_224;
                ap_reg_pp0_iter21_exitcond_flatten_reg_185 <= ap_reg_pp0_iter20_exitcond_flatten_reg_185;
                ap_reg_pp0_iter21_tmp_17_reg_231 <= ap_reg_pp0_iter20_tmp_17_reg_231;
                ap_reg_pp0_iter21_tmp_s_reg_224 <= ap_reg_pp0_iter20_tmp_s_reg_224;
                ap_reg_pp0_iter22_exitcond_flatten_reg_185 <= ap_reg_pp0_iter21_exitcond_flatten_reg_185;
                ap_reg_pp0_iter22_tmp_17_reg_231 <= ap_reg_pp0_iter21_tmp_17_reg_231;
                ap_reg_pp0_iter22_tmp_s_reg_224 <= ap_reg_pp0_iter21_tmp_s_reg_224;
                ap_reg_pp0_iter23_exitcond_flatten_reg_185 <= ap_reg_pp0_iter22_exitcond_flatten_reg_185;
                ap_reg_pp0_iter23_tmp_17_reg_231 <= ap_reg_pp0_iter22_tmp_17_reg_231;
                ap_reg_pp0_iter23_tmp_s_reg_224 <= ap_reg_pp0_iter22_tmp_s_reg_224;
                ap_reg_pp0_iter24_exitcond_flatten_reg_185 <= ap_reg_pp0_iter23_exitcond_flatten_reg_185;
                ap_reg_pp0_iter25_exitcond_flatten_reg_185 <= ap_reg_pp0_iter24_exitcond_flatten_reg_185;
                ap_reg_pp0_iter26_exitcond_flatten_reg_185 <= ap_reg_pp0_iter25_exitcond_flatten_reg_185;
                ap_reg_pp0_iter27_exitcond_flatten_reg_185 <= ap_reg_pp0_iter26_exitcond_flatten_reg_185;
                ap_reg_pp0_iter28_exitcond_flatten_reg_185 <= ap_reg_pp0_iter27_exitcond_flatten_reg_185;
                ap_reg_pp0_iter29_exitcond_flatten_reg_185 <= ap_reg_pp0_iter28_exitcond_flatten_reg_185;
                ap_reg_pp0_iter2_exitcond_flatten_reg_185 <= ap_reg_pp0_iter1_exitcond_flatten_reg_185;
                ap_reg_pp0_iter30_exitcond_flatten_reg_185 <= ap_reg_pp0_iter29_exitcond_flatten_reg_185;
                ap_reg_pp0_iter31_exitcond_flatten_reg_185 <= ap_reg_pp0_iter30_exitcond_flatten_reg_185;
                ap_reg_pp0_iter32_exitcond_flatten_reg_185 <= ap_reg_pp0_iter31_exitcond_flatten_reg_185;
                ap_reg_pp0_iter33_exitcond_flatten_reg_185 <= ap_reg_pp0_iter32_exitcond_flatten_reg_185;
                ap_reg_pp0_iter34_exitcond_flatten_reg_185 <= ap_reg_pp0_iter33_exitcond_flatten_reg_185;
                ap_reg_pp0_iter35_exitcond_flatten_reg_185 <= ap_reg_pp0_iter34_exitcond_flatten_reg_185;
                ap_reg_pp0_iter36_exitcond_flatten_reg_185 <= ap_reg_pp0_iter35_exitcond_flatten_reg_185;
                ap_reg_pp0_iter37_exitcond_flatten_reg_185 <= ap_reg_pp0_iter36_exitcond_flatten_reg_185;
                ap_reg_pp0_iter38_exitcond_flatten_reg_185 <= ap_reg_pp0_iter37_exitcond_flatten_reg_185;
                ap_reg_pp0_iter39_exitcond_flatten_reg_185 <= ap_reg_pp0_iter38_exitcond_flatten_reg_185;
                ap_reg_pp0_iter3_exitcond_flatten_reg_185 <= ap_reg_pp0_iter2_exitcond_flatten_reg_185;
                ap_reg_pp0_iter40_exitcond_flatten_reg_185 <= ap_reg_pp0_iter39_exitcond_flatten_reg_185;
                ap_reg_pp0_iter41_exitcond_flatten_reg_185 <= ap_reg_pp0_iter40_exitcond_flatten_reg_185;
                ap_reg_pp0_iter42_exitcond_flatten_reg_185 <= ap_reg_pp0_iter41_exitcond_flatten_reg_185;
                ap_reg_pp0_iter43_exitcond_flatten_reg_185 <= ap_reg_pp0_iter42_exitcond_flatten_reg_185;
                ap_reg_pp0_iter44_exitcond_flatten_reg_185 <= ap_reg_pp0_iter43_exitcond_flatten_reg_185;
                ap_reg_pp0_iter45_exitcond_flatten_reg_185 <= ap_reg_pp0_iter44_exitcond_flatten_reg_185;
                ap_reg_pp0_iter46_exitcond_flatten_reg_185 <= ap_reg_pp0_iter45_exitcond_flatten_reg_185;
                ap_reg_pp0_iter47_exitcond_flatten_reg_185 <= ap_reg_pp0_iter46_exitcond_flatten_reg_185;
                ap_reg_pp0_iter48_exitcond_flatten_reg_185 <= ap_reg_pp0_iter47_exitcond_flatten_reg_185;
                ap_reg_pp0_iter49_exitcond_flatten_reg_185 <= ap_reg_pp0_iter48_exitcond_flatten_reg_185;
                ap_reg_pp0_iter4_exitcond_flatten_reg_185 <= ap_reg_pp0_iter3_exitcond_flatten_reg_185;
                ap_reg_pp0_iter50_exitcond_flatten_reg_185 <= ap_reg_pp0_iter49_exitcond_flatten_reg_185;
                ap_reg_pp0_iter51_exitcond_flatten_reg_185 <= ap_reg_pp0_iter50_exitcond_flatten_reg_185;
                ap_reg_pp0_iter52_exitcond_flatten_reg_185 <= ap_reg_pp0_iter51_exitcond_flatten_reg_185;
                ap_reg_pp0_iter53_exitcond_flatten_reg_185 <= ap_reg_pp0_iter52_exitcond_flatten_reg_185;
                ap_reg_pp0_iter54_exitcond_flatten_reg_185 <= ap_reg_pp0_iter53_exitcond_flatten_reg_185;
                ap_reg_pp0_iter55_exitcond_flatten_reg_185 <= ap_reg_pp0_iter54_exitcond_flatten_reg_185;
                ap_reg_pp0_iter56_exitcond_flatten_reg_185 <= ap_reg_pp0_iter55_exitcond_flatten_reg_185;
                ap_reg_pp0_iter57_exitcond_flatten_reg_185 <= ap_reg_pp0_iter56_exitcond_flatten_reg_185;
                ap_reg_pp0_iter58_exitcond_flatten_reg_185 <= ap_reg_pp0_iter57_exitcond_flatten_reg_185;
                ap_reg_pp0_iter59_exitcond_flatten_reg_185 <= ap_reg_pp0_iter58_exitcond_flatten_reg_185;
                ap_reg_pp0_iter5_exitcond_flatten_reg_185 <= ap_reg_pp0_iter4_exitcond_flatten_reg_185;
                ap_reg_pp0_iter6_exitcond_flatten_reg_185 <= ap_reg_pp0_iter5_exitcond_flatten_reg_185;
                ap_reg_pp0_iter7_exitcond_flatten_reg_185 <= ap_reg_pp0_iter6_exitcond_flatten_reg_185;
                ap_reg_pp0_iter8_exitcond_flatten_reg_185 <= ap_reg_pp0_iter7_exitcond_flatten_reg_185;
                ap_reg_pp0_iter9_exitcond_flatten_reg_185 <= ap_reg_pp0_iter8_exitcond_flatten_reg_185;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_185 <= exitcond_flatten_reg_185;
                exitcond_flatten_reg_185 <= exitcond_flatten_fu_165_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter6_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                cb_reg_219 <= grp_fu_157_p1;
                cr_reg_214 <= grp_fu_154_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter39_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                res_reg_283 <= grp_fu_149_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter58_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_10_reg_293 <= tmp_10_fu_96_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter57_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_11_reg_288 <= grp_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter17_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_16_reg_238 <= grp_fu_121_p2;
                tmp_18_reg_243 <= grp_fu_126_p2;
                tmp_21_reg_248 <= grp_fu_131_p2;
                tmp_22_reg_253 <= grp_fu_136_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter11_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_17_reg_231 <= grp_fu_104_p2;
                tmp_s_reg_224 <= grp_fu_99_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter22_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_19_reg_258 <= grp_fu_109_p2;
                tmp_23_reg_263 <= grp_fu_113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter28_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_20_reg_268 <= grp_fu_141_p2;
                tmp_24_reg_273 <= grp_fu_145_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter33_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_25_reg_278 <= grp_fu_117_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_26_reg_199 <= Cb_Img_data_stream_0_V_dout;
                tmp_reg_194 <= Cr_Img_data_stream_0_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter60, exitcond_flatten_fu_165_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter59)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_165_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter60 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter60 = ap_const_logic_1)) or ((exitcond_flatten_fu_165_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    Cb_Img_data_stream_0_V_blk_n_assign_proc : process(Cb_Img_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_185)
    begin
        if (((exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Cb_Img_data_stream_0_V_blk_n <= Cb_Img_data_stream_0_V_empty_n;
        else 
            Cb_Img_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Cb_Img_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_185, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Cb_Img_data_stream_0_V_read <= ap_const_logic_1;
        else 
            Cb_Img_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    Cr_Img_data_stream_0_V_blk_n_assign_proc : process(Cr_Img_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_185)
    begin
        if (((exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Cr_Img_data_stream_0_V_blk_n <= Cr_Img_data_stream_0_V_empty_n;
        else 
            Cr_Img_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Cr_Img_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_185, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Cr_Img_data_stream_0_V_read <= ap_const_logic_1;
        else 
            Cr_Img_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;


    Sim_data_stream_0_V_blk_n_assign_proc : process(Sim_data_stream_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter60, ap_reg_pp0_iter59_exitcond_flatten_reg_185)
    begin
        if (((ap_reg_pp0_iter59_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_1))) then 
            Sim_data_stream_0_V_blk_n <= Sim_data_stream_0_V_full_n;
        else 
            Sim_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Sim_data_stream_0_V_din <= tmp_10_reg_293;

    Sim_data_stream_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter60, ap_reg_pp0_iter59_exitcond_flatten_reg_185, ap_block_pp0_stage0_11001)
    begin
        if (((ap_reg_pp0_iter59_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter60 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            Sim_data_stream_0_V_write <= ap_const_logic_1;
        else 
            Sim_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state63 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(Cr_Img_data_stream_0_V_empty_n, Cb_Img_data_stream_0_V_empty_n, Sim_data_stream_0_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_185, ap_enable_reg_pp0_iter60, ap_reg_pp0_iter59_exitcond_flatten_reg_185)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_reg_pp0_iter59_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_logic_0 = Sim_data_stream_0_V_full_n) and (ap_enable_reg_pp0_iter60 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_logic_0 = Cb_Img_data_stream_0_V_empty_n)) or ((exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_logic_0 = Cr_Img_data_stream_0_V_empty_n)))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(Cr_Img_data_stream_0_V_empty_n, Cb_Img_data_stream_0_V_empty_n, Sim_data_stream_0_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_185, ap_enable_reg_pp0_iter60, ap_reg_pp0_iter59_exitcond_flatten_reg_185)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_reg_pp0_iter59_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_logic_0 = Sim_data_stream_0_V_full_n) and (ap_enable_reg_pp0_iter60 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_logic_0 = Cb_Img_data_stream_0_V_empty_n)) or ((exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_logic_0 = Cr_Img_data_stream_0_V_empty_n)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(Cr_Img_data_stream_0_V_empty_n, Cb_Img_data_stream_0_V_empty_n, Sim_data_stream_0_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_185, ap_enable_reg_pp0_iter60, ap_reg_pp0_iter59_exitcond_flatten_reg_185)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_reg_pp0_iter59_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_logic_0 = Sim_data_stream_0_V_full_n) and (ap_enable_reg_pp0_iter60 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (((exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_logic_0 = Cb_Img_data_stream_0_V_empty_n)) or ((exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_logic_0 = Cr_Img_data_stream_0_V_empty_n)))));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(Cr_Img_data_stream_0_V_empty_n, Cb_Img_data_stream_0_V_empty_n, exitcond_flatten_reg_185)
    begin
                ap_block_state3_pp0_stage0_iter1 <= (((exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_logic_0 = Cb_Img_data_stream_0_V_empty_n)) or ((exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_logic_0 = Cr_Img_data_stream_0_V_empty_n)));
    end process;

        ap_block_state40_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter50 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state54_pp0_stage0_iter52 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter53 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter54 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter56 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state59_pp0_stage0_iter57 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state60_pp0_stage0_iter58 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state61_pp0_stage0_iter59 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state62_pp0_stage0_iter60_assign_proc : process(Sim_data_stream_0_V_full_n, ap_reg_pp0_iter59_exitcond_flatten_reg_185)
    begin
                ap_block_state62_pp0_stage0_iter60 <= ((ap_reg_pp0_iter59_exitcond_flatten_reg_185 = ap_const_lv1_0) and (ap_const_logic_0 = Sim_data_stream_0_V_full_n));
    end process;

        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_165_p2)
    begin
        if ((exitcond_flatten_fu_165_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter60, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49, ap_enable_reg_pp0_iter50, ap_enable_reg_pp0_iter51, ap_enable_reg_pp0_iter52, ap_enable_reg_pp0_iter53, ap_enable_reg_pp0_iter54, ap_enable_reg_pp0_iter55, ap_enable_reg_pp0_iter56, ap_enable_reg_pp0_iter57, ap_enable_reg_pp0_iter58, ap_enable_reg_pp0_iter59)
    begin
        if (((ap_enable_reg_pp0_iter60 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter59 = ap_const_logic_0) and (ap_enable_reg_pp0_iter58 = ap_const_logic_0) and (ap_enable_reg_pp0_iter57 = ap_const_logic_0) and (ap_enable_reg_pp0_iter56 = ap_const_logic_0) and (ap_enable_reg_pp0_iter55 = ap_const_logic_0) and (ap_enable_reg_pp0_iter54 = ap_const_logic_0) and (ap_enable_reg_pp0_iter53 = ap_const_logic_0) and (ap_enable_reg_pp0_iter52 = ap_const_logic_0) and (ap_enable_reg_pp0_iter51 = ap_const_logic_0) and (ap_enable_reg_pp0_iter50 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_flatten_fu_165_p2 <= "1" when (indvar_flatten_reg_85 = ap_const_lv19_54600) else "0";

    grp_fu_104_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_104_ce <= ap_const_logic_1;
        else 
            grp_fu_104_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_109_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_109_ce <= ap_const_logic_1;
        else 
            grp_fu_109_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_113_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_113_ce <= ap_const_logic_1;
        else 
            grp_fu_113_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_117_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_117_ce <= ap_const_logic_1;
        else 
            grp_fu_117_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_121_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_121_ce <= ap_const_logic_1;
        else 
            grp_fu_121_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_126_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_126_ce <= ap_const_logic_1;
        else 
            grp_fu_126_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_131_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_131_ce <= ap_const_logic_1;
        else 
            grp_fu_131_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_136_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_136_ce <= ap_const_logic_1;
        else 
            grp_fu_136_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_141_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_141_ce <= ap_const_logic_1;
        else 
            grp_fu_141_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_145_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_145_ce <= ap_const_logic_1;
        else 
            grp_fu_145_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_149_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_149_ce <= ap_const_logic_1;
        else 
            grp_fu_149_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_154_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_154_ce <= ap_const_logic_1;
        else 
            grp_fu_154_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_154_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_194),32));

    grp_fu_157_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_157_ce <= ap_const_logic_1;
        else 
            grp_fu_157_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_157_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_reg_199),32));

    grp_fu_160_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_160_ce <= ap_const_logic_1;
        else 
            grp_fu_160_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_99_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_99_ce <= ap_const_logic_1;
        else 
            grp_fu_99_ce <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_171_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_85) + unsigned(ap_const_lv19_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state63)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

end behav;
