-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity YCrCb_GUASSIAN_Loop_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    nor_copy2_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    nor_copy2_data_stream_0_V_empty_n : IN STD_LOGIC;
    nor_copy2_data_stream_0_V_read : OUT STD_LOGIC;
    tmp3_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp3_empty_n : IN STD_LOGIC;
    tmp3_read : OUT STD_LOGIC;
    origin_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    origin_data_stream_0_V_full_n : IN STD_LOGIC;
    origin_data_stream_0_V_write : OUT STD_LOGIC );
end;


architecture behav of YCrCb_GUASSIAN_Loop_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv19_54600 : STD_LOGIC_VECTOR (18 downto 0) := "1010100011000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal nor_copy2_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_blk_n : STD_LOGIC;
    signal origin_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_87 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp3_read_reg_204 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal scalar_tmp3_to_int_fu_106_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal scalar_tmp3_to_int_reg_209 : STD_LOGIC_VECTOR (63 downto 0);
    signal notrhs2_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs2_reg_214 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_219 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_126_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal notlhs1_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_reg_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter1_notlhs1_reg_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_notlhs1_reg_228 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_76_i_fu_98_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_76_i_reg_233 : STD_LOGIC_VECTOR (63 downto 0);
    signal notlhs_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_reg_239 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_244 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_fu_102_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_33_reg_249 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_110_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_29_fu_132_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_76_i_to_int_fu_147_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_150_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_fu_160_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_30_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_fu_184_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_34_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component ImgProcess_Top_fpkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ImgProcess_Top_dcwdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    ImgProcess_Top_fpkbM_U128 : component ImgProcess_Top_fpkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => nor_copy2_data_stream_0_V_dout,
        dout => tmp_76_i_fu_98_p1);

    ImgProcess_Top_dcwdI_U129 : component ImgProcess_Top_dcwdI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_76_i_reg_233,
        din1 => tmp3_read_reg_204,
        opcode => ap_const_lv5_2,
        dout => tmp_33_fu_102_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((real_start = ap_const_logic_0) or (tmp3_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((not(((real_start = ap_const_logic_0) or (tmp3_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((internal_ap_ready = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_87 <= indvar_flatten_next_fu_126_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (tmp3_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_87 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_219 <= exitcond_flatten_reg_219;
                ap_reg_pp0_iter1_notlhs1_reg_228 <= notlhs1_reg_228;
                exitcond_flatten_reg_219 <= exitcond_flatten_fu_120_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter2_exitcond_flatten_reg_219 <= ap_reg_pp0_iter1_exitcond_flatten_reg_219;
                ap_reg_pp0_iter2_notlhs1_reg_228 <= ap_reg_pp0_iter1_notlhs1_reg_228;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_120_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                notlhs1_reg_228 <= notlhs1_fu_141_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter1_exitcond_flatten_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                notlhs_reg_239 <= notlhs_fu_164_p2;
                notrhs_reg_244 <= notrhs_fu_170_p2;
                tmp_33_reg_249 <= tmp_33_fu_102_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((real_start = ap_const_logic_0) or (tmp3_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                notrhs2_reg_214 <= notrhs2_fu_114_p2;
                scalar_tmp3_to_int_reg_209 <= scalar_tmp3_to_int_fu_106_p1;
                tmp3_read_reg_204 <= tmp3_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_219 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_76_i_reg_233 <= tmp_76_i_fu_98_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, tmp3_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, exitcond_flatten_fu_120_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (tmp3_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_120_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((exitcond_flatten_fu_120_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(nor_copy2_data_stream_0_V_empty_n, origin_data_stream_0_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_219, ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_exitcond_flatten_reg_219)
    begin
                ap_block_pp0_stage0_00001 <= (((ap_reg_pp0_iter2_exitcond_flatten_reg_219 = ap_const_lv1_0) and (origin_data_stream_0_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten_reg_219 = ap_const_lv1_0) and (nor_copy2_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(nor_copy2_data_stream_0_V_empty_n, origin_data_stream_0_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_219, ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_exitcond_flatten_reg_219)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_reg_pp0_iter2_exitcond_flatten_reg_219 = ap_const_lv1_0) and (origin_data_stream_0_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten_reg_219 = ap_const_lv1_0) and (nor_copy2_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(nor_copy2_data_stream_0_V_empty_n, origin_data_stream_0_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_219, ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_exitcond_flatten_reg_219)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_reg_pp0_iter2_exitcond_flatten_reg_219 = ap_const_lv1_0) and (origin_data_stream_0_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten_reg_219 = ap_const_lv1_0) and (nor_copy2_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(nor_copy2_data_stream_0_V_empty_n, origin_data_stream_0_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_219, ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_exitcond_flatten_reg_219)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_reg_pp0_iter2_exitcond_flatten_reg_219 = ap_const_lv1_0) and (origin_data_stream_0_V_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((exitcond_flatten_reg_219 = ap_const_lv1_0) and (nor_copy2_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(real_start, ap_done_reg, tmp3_empty_n)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (tmp3_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state3_pp0_stage0_iter1_assign_proc : process(nor_copy2_data_stream_0_V_empty_n, exitcond_flatten_reg_219)
    begin
                ap_block_state3_pp0_stage0_iter1 <= ((exitcond_flatten_reg_219 = ap_const_lv1_0) and (nor_copy2_data_stream_0_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter3_assign_proc : process(origin_data_stream_0_V_full_n, ap_reg_pp0_iter2_exitcond_flatten_reg_219)
    begin
                ap_block_state5_pp0_stage0_iter3 <= ((ap_reg_pp0_iter2_exitcond_flatten_reg_219 = ap_const_lv1_0) and (origin_data_stream_0_V_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten_fu_120_p2)
    begin
        if ((exitcond_flatten_fu_120_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_ready <= internal_ap_ready;
    exitcond_flatten_fu_120_p2 <= "1" when (indvar_flatten_reg_87 = ap_const_lv19_54600) else "0";
    indvar_flatten_next_fu_126_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_87) + unsigned(ap_const_lv19_1));

    internal_ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    nor_copy2_data_stream_0_V_blk_n_assign_proc : process(nor_copy2_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_219)
    begin
        if (((exitcond_flatten_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nor_copy2_data_stream_0_V_blk_n <= nor_copy2_data_stream_0_V_empty_n;
        else 
            nor_copy2_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    nor_copy2_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_219, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_219 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            nor_copy2_data_stream_0_V_read <= ap_const_logic_1;
        else 
            nor_copy2_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;

    notlhs1_fu_141_p2 <= "0" when (tmp_29_fu_132_p4 = ap_const_lv11_7FF) else "1";
    notlhs_fu_164_p2 <= "0" when (tmp_s_fu_150_p4 = ap_const_lv11_7FF) else "1";
    notrhs2_fu_114_p2 <= "1" when (tmp_fu_110_p1 = ap_const_lv52_0) else "0";
    notrhs_fu_170_p2 <= "1" when (tmp_28_fu_160_p1 = ap_const_lv52_0) else "0";

    origin_data_stream_0_V_blk_n_assign_proc : process(origin_data_stream_0_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_exitcond_flatten_reg_219)
    begin
        if (((ap_reg_pp0_iter2_exitcond_flatten_reg_219 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            origin_data_stream_0_V_blk_n <= origin_data_stream_0_V_full_n;
        else 
            origin_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    origin_data_stream_0_V_din <= 
        ap_const_lv8_FF when (tmp_34_fu_190_p2(0) = '1') else 
        ap_const_lv8_0;

    origin_data_stream_0_V_write_assign_proc : process(ap_enable_reg_pp0_iter3, ap_reg_pp0_iter2_exitcond_flatten_reg_219, ap_block_pp0_stage0_11001)
    begin
        if (((ap_reg_pp0_iter2_exitcond_flatten_reg_219 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            origin_data_stream_0_V_write <= ap_const_logic_1;
        else 
            origin_data_stream_0_V_write <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    scalar_tmp3_to_int_fu_106_p1 <= tmp3_dout;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (real_start = ap_const_logic_1))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;


    tmp3_blk_n_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, tmp3_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp3_blk_n <= tmp3_empty_n;
        else 
            tmp3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    tmp3_read_assign_proc : process(real_start, ap_done_reg, ap_CS_fsm_state1, tmp3_empty_n)
    begin
        if ((not(((real_start = ap_const_logic_0) or (tmp3_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            tmp3_read <= ap_const_logic_1;
        else 
            tmp3_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_28_fu_160_p1 <= tmp_76_i_to_int_fu_147_p1(52 - 1 downto 0);
    tmp_29_fu_132_p4 <= scalar_tmp3_to_int_reg_209(62 downto 52);
    tmp_30_fu_176_p2 <= (notrhs_reg_244 or notlhs_reg_239);
    tmp_31_fu_180_p2 <= (notrhs2_reg_214 or ap_reg_pp0_iter2_notlhs1_reg_228);
    tmp_32_fu_184_p2 <= (tmp_31_fu_180_p2 and tmp_30_fu_176_p2);
    tmp_34_fu_190_p2 <= (tmp_33_reg_249 and tmp_32_fu_184_p2);
    tmp_76_i_to_int_fu_147_p1 <= tmp_76_i_reg_233;
    tmp_fu_110_p1 <= scalar_tmp3_to_int_fu_106_p1(52 - 1 downto 0);
    tmp_s_fu_150_p4 <= tmp_76_i_to_int_fu_147_p1(62 downto 52);
end behav;
