// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AXIvideo2Mat_HH_
#define _AXIvideo2Mat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AXIvideo2Mat : public sc_module {
    // Port declarations 27
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > input_r_TDATA;
    sc_in< sc_logic > input_r_TVALID;
    sc_out< sc_logic > input_r_TREADY;
    sc_in< sc_lv<4> > input_r_TKEEP;
    sc_in< sc_lv<4> > input_r_TSTRB;
    sc_in< sc_lv<1> > input_r_TUSER;
    sc_in< sc_lv<1> > input_r_TLAST;
    sc_in< sc_lv<1> > input_r_TID;
    sc_in< sc_lv<1> > input_r_TDEST;
    sc_in< sc_lv<32> > rows;
    sc_in< sc_lv<32> > cols;
    sc_out< sc_lv<8> > src_mat_data_stream_s_din;
    sc_in< sc_logic > src_mat_data_stream_s_full_n;
    sc_out< sc_logic > src_mat_data_stream_s_write;
    sc_out< sc_lv<8> > src_mat_data_stream_1_din;
    sc_in< sc_logic > src_mat_data_stream_1_full_n;
    sc_out< sc_logic > src_mat_data_stream_1_write;
    sc_out< sc_lv<8> > src_mat_data_stream_2_din;
    sc_in< sc_logic > src_mat_data_stream_2_full_n;
    sc_out< sc_logic > src_mat_data_stream_2_write;


    // Module declarations
    AXIvideo2Mat(sc_module_name name);
    SC_HAS_PROCESS(AXIvideo2Mat);

    ~AXIvideo2Mat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > input_V_data_V_0_data_out;
    sc_signal< sc_logic > input_V_data_V_0_vld_in;
    sc_signal< sc_logic > input_V_data_V_0_vld_out;
    sc_signal< sc_logic > input_V_data_V_0_ack_in;
    sc_signal< sc_logic > input_V_data_V_0_ack_out;
    sc_signal< sc_lv<32> > input_V_data_V_0_payload_A;
    sc_signal< sc_lv<32> > input_V_data_V_0_payload_B;
    sc_signal< sc_logic > input_V_data_V_0_sel_rd;
    sc_signal< sc_logic > input_V_data_V_0_sel_wr;
    sc_signal< sc_logic > input_V_data_V_0_sel;
    sc_signal< sc_logic > input_V_data_V_0_load_A;
    sc_signal< sc_logic > input_V_data_V_0_load_B;
    sc_signal< sc_lv<2> > input_V_data_V_0_state;
    sc_signal< sc_logic > input_V_data_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > input_V_user_V_0_data_out;
    sc_signal< sc_logic > input_V_user_V_0_vld_in;
    sc_signal< sc_logic > input_V_user_V_0_vld_out;
    sc_signal< sc_logic > input_V_user_V_0_ack_in;
    sc_signal< sc_logic > input_V_user_V_0_ack_out;
    sc_signal< sc_lv<1> > input_V_user_V_0_payload_A;
    sc_signal< sc_lv<1> > input_V_user_V_0_payload_B;
    sc_signal< sc_logic > input_V_user_V_0_sel_rd;
    sc_signal< sc_logic > input_V_user_V_0_sel_wr;
    sc_signal< sc_logic > input_V_user_V_0_sel;
    sc_signal< sc_logic > input_V_user_V_0_load_A;
    sc_signal< sc_logic > input_V_user_V_0_load_B;
    sc_signal< sc_lv<2> > input_V_user_V_0_state;
    sc_signal< sc_logic > input_V_user_V_0_state_cmp_full;
    sc_signal< sc_lv<1> > input_V_last_V_0_data_out;
    sc_signal< sc_logic > input_V_last_V_0_vld_in;
    sc_signal< sc_logic > input_V_last_V_0_vld_out;
    sc_signal< sc_logic > input_V_last_V_0_ack_in;
    sc_signal< sc_logic > input_V_last_V_0_ack_out;
    sc_signal< sc_lv<1> > input_V_last_V_0_payload_A;
    sc_signal< sc_lv<1> > input_V_last_V_0_payload_B;
    sc_signal< sc_logic > input_V_last_V_0_sel_rd;
    sc_signal< sc_logic > input_V_last_V_0_sel_wr;
    sc_signal< sc_logic > input_V_last_V_0_sel;
    sc_signal< sc_logic > input_V_last_V_0_load_A;
    sc_signal< sc_logic > input_V_last_V_0_load_B;
    sc_signal< sc_lv<2> > input_V_last_V_0_state;
    sc_signal< sc_logic > input_V_last_V_0_state_cmp_full;
    sc_signal< sc_logic > input_V_dest_V_0_vld_in;
    sc_signal< sc_logic > input_V_dest_V_0_ack_out;
    sc_signal< sc_lv<2> > input_V_dest_V_0_state;
    sc_signal< sc_logic > input_r_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<1> > exitcond_i_reg_422;
    sc_signal< sc_lv<1> > brmerge_i_reg_431;
    sc_signal< sc_logic > ap_CS_fsm_pp2_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter1;
    sc_signal< bool > ap_block_pp2_stage0;
    sc_signal< sc_lv<1> > eol_2_i_reg_258;
    sc_signal< sc_logic > src_mat_data_stream_s_blk_n;
    sc_signal< sc_logic > src_mat_data_stream_1_blk_n;
    sc_signal< sc_logic > src_mat_data_stream_2_blk_n;
    sc_signal< sc_lv<9> > t_V_16_reg_188;
    sc_signal< sc_lv<1> > eol_i_reg_199;
    sc_signal< sc_lv<1> > eol_reg_211;
    sc_signal< sc_lv<32> > axi_data_V_1_i_reg_222;
    sc_signal< sc_lv<1> > axi_last_V_3_i_reg_269;
    sc_signal< sc_lv<32> > axi_data_V_3_i_reg_281;
    sc_signal< sc_lv<10> > rows_V_fu_303_p1;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<9> > cols_V_fu_307_p1;
    sc_signal< sc_lv<32> > tmp_data_V_reg_393;
    sc_signal< sc_lv<1> > tmp_last_V_reg_401;
    sc_signal< sc_lv<1> > exitcond5_i_fu_320_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<10> > i_V_fu_325_p2;
    sc_signal< sc_lv<10> > i_V_reg_417;
    sc_signal< sc_lv<1> > exitcond_i_fu_331_p2;
    sc_signal< bool > ap_block_state5_pp1_stage0_iter0;
    sc_signal< bool > ap_predicate_op62_read_state6;
    sc_signal< bool > ap_block_state6_pp1_stage0_iter1;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_lv<9> > j_V_fu_336_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<1> > brmerge_i_fu_345_p2;
    sc_signal< bool > ap_block_state8_pp2_stage0_iter0;
    sc_signal< bool > ap_block_state9_pp2_stage0_iter1;
    sc_signal< bool > ap_block_pp2_stage0_11001;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_enable_reg_pp2_iter0;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< bool > ap_block_pp2_stage0_subdone;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_2_i_phi_fu_261_p4;
    sc_signal< sc_lv<1> > axi_last_V1_i_reg_157;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<32> > axi_data_V1_i_reg_167;
    sc_signal< sc_lv<10> > t_V_reg_177;
    sc_signal< sc_lv<1> > ap_phi_mux_eol_i_phi_fu_203_p4;
    sc_signal< sc_lv<1> > ap_phi_mux_axi_last_V_2_i_phi_fu_238_p4;
    sc_signal< sc_lv<32> > ap_phi_mux_p_Val2_s_phi_fu_250_p4;
    sc_signal< sc_lv<1> > ap_phi_reg_pp1_iter1_axi_last_V_2_i_reg_233;
    sc_signal< sc_lv<32> > ap_phi_reg_pp1_iter1_p_Val2_s_reg_246;
    sc_signal< bool > ap_block_pp1_stage0_01001;
    sc_signal< sc_lv<1> > sof_1_i_fu_102;
    sc_signal< sc_lv<1> > tmp_user_V_fu_311_p1;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    sc_signal< sc_logic > ap_idle_pp2;
    sc_signal< sc_logic > ap_enable_pp2;
    sc_signal< bool > ap_condition_495;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_pp1_stage0;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_pp2_stage0;
    static const sc_lv<8> ap_ST_fsm_state10;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_pp2_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_01001();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_pp2_stage0();
    void thread_ap_block_pp2_stage0_11001();
    void thread_ap_block_pp2_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state5_pp1_stage0_iter0();
    void thread_ap_block_state6_pp1_stage0_iter1();
    void thread_ap_block_state8_pp2_stage0_iter0();
    void thread_ap_block_state9_pp2_stage0_iter1();
    void thread_ap_condition_495();
    void thread_ap_done();
    void thread_ap_enable_pp1();
    void thread_ap_enable_pp2();
    void thread_ap_idle();
    void thread_ap_idle_pp1();
    void thread_ap_idle_pp2();
    void thread_ap_phi_mux_axi_last_V_2_i_phi_fu_238_p4();
    void thread_ap_phi_mux_eol_2_i_phi_fu_261_p4();
    void thread_ap_phi_mux_eol_i_phi_fu_203_p4();
    void thread_ap_phi_mux_p_Val2_s_phi_fu_250_p4();
    void thread_ap_phi_reg_pp1_iter1_axi_last_V_2_i_reg_233();
    void thread_ap_phi_reg_pp1_iter1_p_Val2_s_reg_246();
    void thread_ap_predicate_op62_read_state6();
    void thread_ap_ready();
    void thread_brmerge_i_fu_345_p2();
    void thread_cols_V_fu_307_p1();
    void thread_exitcond5_i_fu_320_p2();
    void thread_exitcond_i_fu_331_p2();
    void thread_i_V_fu_325_p2();
    void thread_input_V_data_V_0_ack_in();
    void thread_input_V_data_V_0_ack_out();
    void thread_input_V_data_V_0_data_out();
    void thread_input_V_data_V_0_load_A();
    void thread_input_V_data_V_0_load_B();
    void thread_input_V_data_V_0_sel();
    void thread_input_V_data_V_0_state_cmp_full();
    void thread_input_V_data_V_0_vld_in();
    void thread_input_V_data_V_0_vld_out();
    void thread_input_V_dest_V_0_ack_out();
    void thread_input_V_dest_V_0_vld_in();
    void thread_input_V_last_V_0_ack_in();
    void thread_input_V_last_V_0_ack_out();
    void thread_input_V_last_V_0_data_out();
    void thread_input_V_last_V_0_load_A();
    void thread_input_V_last_V_0_load_B();
    void thread_input_V_last_V_0_sel();
    void thread_input_V_last_V_0_state_cmp_full();
    void thread_input_V_last_V_0_vld_in();
    void thread_input_V_last_V_0_vld_out();
    void thread_input_V_user_V_0_ack_in();
    void thread_input_V_user_V_0_ack_out();
    void thread_input_V_user_V_0_data_out();
    void thread_input_V_user_V_0_load_A();
    void thread_input_V_user_V_0_load_B();
    void thread_input_V_user_V_0_sel();
    void thread_input_V_user_V_0_state_cmp_full();
    void thread_input_V_user_V_0_vld_in();
    void thread_input_V_user_V_0_vld_out();
    void thread_input_r_TDATA_blk_n();
    void thread_input_r_TREADY();
    void thread_j_V_fu_336_p2();
    void thread_rows_V_fu_303_p1();
    void thread_src_mat_data_stream_1_blk_n();
    void thread_src_mat_data_stream_1_din();
    void thread_src_mat_data_stream_1_write();
    void thread_src_mat_data_stream_2_blk_n();
    void thread_src_mat_data_stream_2_din();
    void thread_src_mat_data_stream_2_write();
    void thread_src_mat_data_stream_s_blk_n();
    void thread_src_mat_data_stream_s_din();
    void thread_src_mat_data_stream_s_write();
    void thread_tmp_user_V_fu_311_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
