// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Mat2AXIvideo.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Mat2AXIvideo::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Mat2AXIvideo::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<4> Mat2AXIvideo::ap_ST_fsm_state1 = "1";
const sc_lv<4> Mat2AXIvideo::ap_ST_fsm_state2 = "10";
const sc_lv<4> Mat2AXIvideo::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<4> Mat2AXIvideo::ap_ST_fsm_state6 = "1000";
const sc_lv<32> Mat2AXIvideo::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Mat2AXIvideo::ap_const_boolean_1 = true;
const sc_lv<1> Mat2AXIvideo::ap_const_lv1_0 = "0";
const sc_lv<1> Mat2AXIvideo::ap_const_lv1_1 = "1";
const sc_lv<2> Mat2AXIvideo::ap_const_lv2_0 = "00";
const sc_lv<2> Mat2AXIvideo::ap_const_lv2_2 = "10";
const sc_lv<2> Mat2AXIvideo::ap_const_lv2_3 = "11";
const sc_lv<2> Mat2AXIvideo::ap_const_lv2_1 = "1";
const sc_lv<32> Mat2AXIvideo::ap_const_lv32_2 = "10";
const bool Mat2AXIvideo::ap_const_boolean_0 = false;
const sc_lv<32> Mat2AXIvideo::ap_const_lv32_1 = "1";
const sc_lv<10> Mat2AXIvideo::ap_const_lv10_0 = "0000000000";
const sc_lv<32> Mat2AXIvideo::ap_const_lv32_3 = "11";
const sc_lv<9> Mat2AXIvideo::ap_const_lv9_0 = "000000000";
const sc_lv<4> Mat2AXIvideo::ap_const_lv4_F = "1111";
const sc_lv<4> Mat2AXIvideo::ap_const_lv4_0 = "0000";
const sc_lv<9> Mat2AXIvideo::ap_const_lv9_1FF = "111111111";
const sc_lv<10> Mat2AXIvideo::ap_const_lv10_1 = "1";
const sc_lv<9> Mat2AXIvideo::ap_const_lv9_1 = "1";

Mat2AXIvideo::Mat2AXIvideo(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( nor_mat_data_stream_s_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_260 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( nor_mat_data_stream_s_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_260 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state4_io );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( nor_mat_data_stream_s_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_260 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_block_state4_io );
    sensitive << ( ap_block_state5_io );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state2);
    sensitive << ( nor_output_V_data_V_1_ack_in );
    sensitive << ( nor_output_V_keep_V_1_ack_in );
    sensitive << ( nor_output_V_strb_V_1_ack_in );
    sensitive << ( nor_output_V_user_V_1_ack_in );
    sensitive << ( nor_output_V_last_V_1_ack_in );
    sensitive << ( nor_output_V_id_V_1_ack_in );
    sensitive << ( nor_output_V_dest_V_1_ack_in );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( nor_output_V_data_V_1_ack_in );
    sensitive << ( exitcond_i_reg_260 );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);
    sensitive << ( nor_mat_data_stream_s_empty_n );
    sensitive << ( exitcond_i_reg_260 );

    SC_METHOD(thread_ap_block_state5_io);
    sensitive << ( nor_output_V_data_V_1_ack_in );
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_reg_260 );

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter2);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( exitcond_i_fu_199_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( nor_output_V_data_V_1_ack_in );
    sensitive << ( nor_output_V_keep_V_1_ack_in );
    sensitive << ( nor_output_V_strb_V_1_ack_in );
    sensitive << ( nor_output_V_user_V_1_ack_in );
    sensitive << ( nor_output_V_last_V_1_ack_in );
    sensitive << ( nor_output_V_id_V_1_ack_in );
    sensitive << ( nor_output_V_dest_V_1_ack_in );
    sensitive << ( exitcond2_i_fu_188_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( nor_output_V_data_V_1_ack_in );
    sensitive << ( nor_output_V_keep_V_1_ack_in );
    sensitive << ( nor_output_V_strb_V_1_ack_in );
    sensitive << ( nor_output_V_user_V_1_ack_in );
    sensitive << ( nor_output_V_last_V_1_ack_in );
    sensitive << ( nor_output_V_id_V_1_ack_in );
    sensitive << ( nor_output_V_dest_V_1_ack_in );
    sensitive << ( exitcond2_i_fu_188_p2 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_axi_last_V_fu_210_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( t_V_13_reg_158 );
    sensitive << ( r_V_fu_177_p2 );
    sensitive << ( exitcond_i_fu_199_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_cols_V_fu_173_p1);
    sensitive << ( cols );

    SC_METHOD(thread_exitcond2_i_fu_188_p2);
    sensitive << ( nor_output_V_data_V_1_ack_in );
    sensitive << ( nor_output_V_keep_V_1_ack_in );
    sensitive << ( nor_output_V_strb_V_1_ack_in );
    sensitive << ( nor_output_V_user_V_1_ack_in );
    sensitive << ( nor_output_V_last_V_1_ack_in );
    sensitive << ( nor_output_V_id_V_1_ack_in );
    sensitive << ( nor_output_V_dest_V_1_ack_in );
    sensitive << ( rows_V_fu_169_p1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( t_V_reg_147 );

    SC_METHOD(thread_exitcond_i_fu_199_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( t_V_13_reg_158 );
    sensitive << ( cols_V_fu_173_p1 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_i_V_fu_193_p2);
    sensitive << ( t_V_reg_147 );

    SC_METHOD(thread_j_V_fu_204_p2);
    sensitive << ( t_V_13_reg_158 );

    SC_METHOD(thread_nor_mat_data_stream_s_blk_n);
    sensitive << ( nor_mat_data_stream_s_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_reg_260 );

    SC_METHOD(thread_nor_mat_data_stream_s_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_260 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_nor_output_TDATA);
    sensitive << ( nor_output_V_data_V_1_data_out );

    SC_METHOD(thread_nor_output_TDATA_blk_n);
    sensitive << ( nor_output_V_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_i_reg_260 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_i_reg_260 );

    SC_METHOD(thread_nor_output_TDEST);
    sensitive << ( nor_output_V_dest_V_1_data_out );

    SC_METHOD(thread_nor_output_TID);
    sensitive << ( nor_output_V_id_V_1_data_out );

    SC_METHOD(thread_nor_output_TKEEP);
    sensitive << ( nor_output_V_keep_V_1_data_out );

    SC_METHOD(thread_nor_output_TLAST);
    sensitive << ( nor_output_V_last_V_1_data_out );

    SC_METHOD(thread_nor_output_TSTRB);
    sensitive << ( nor_output_V_strb_V_1_data_out );

    SC_METHOD(thread_nor_output_TUSER);
    sensitive << ( nor_output_V_user_V_1_data_out );

    SC_METHOD(thread_nor_output_TVALID);
    sensitive << ( nor_output_V_dest_V_1_state );

    SC_METHOD(thread_nor_output_V_data_V_1_ack_in);
    sensitive << ( nor_output_V_data_V_1_state );

    SC_METHOD(thread_nor_output_V_data_V_1_ack_out);
    sensitive << ( nor_output_TREADY );

    SC_METHOD(thread_nor_output_V_data_V_1_data_out);
    sensitive << ( nor_output_V_data_V_1_payload_A );
    sensitive << ( nor_output_V_data_V_1_payload_B );
    sensitive << ( nor_output_V_data_V_1_sel );

    SC_METHOD(thread_nor_output_V_data_V_1_load_A);
    sensitive << ( nor_output_V_data_V_1_sel_wr );
    sensitive << ( nor_output_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_nor_output_V_data_V_1_load_B);
    sensitive << ( nor_output_V_data_V_1_sel_wr );
    sensitive << ( nor_output_V_data_V_1_state_cmp_full );

    SC_METHOD(thread_nor_output_V_data_V_1_sel);
    sensitive << ( nor_output_V_data_V_1_sel_rd );

    SC_METHOD(thread_nor_output_V_data_V_1_state_cmp_full);
    sensitive << ( nor_output_V_data_V_1_state );

    SC_METHOD(thread_nor_output_V_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_260 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_nor_output_V_data_V_1_vld_out);
    sensitive << ( nor_output_V_data_V_1_state );

    SC_METHOD(thread_nor_output_V_dest_V_1_ack_in);
    sensitive << ( nor_output_V_dest_V_1_state );

    SC_METHOD(thread_nor_output_V_dest_V_1_ack_out);
    sensitive << ( nor_output_TREADY );

    SC_METHOD(thread_nor_output_V_dest_V_1_data_out);
    sensitive << ( nor_output_V_dest_V_1_sel );

    SC_METHOD(thread_nor_output_V_dest_V_1_sel);
    sensitive << ( nor_output_V_dest_V_1_sel_rd );

    SC_METHOD(thread_nor_output_V_dest_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_260 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_nor_output_V_dest_V_1_vld_out);
    sensitive << ( nor_output_V_dest_V_1_state );

    SC_METHOD(thread_nor_output_V_id_V_1_ack_in);
    sensitive << ( nor_output_V_id_V_1_state );

    SC_METHOD(thread_nor_output_V_id_V_1_ack_out);
    sensitive << ( nor_output_TREADY );

    SC_METHOD(thread_nor_output_V_id_V_1_data_out);
    sensitive << ( nor_output_V_id_V_1_sel );

    SC_METHOD(thread_nor_output_V_id_V_1_sel);
    sensitive << ( nor_output_V_id_V_1_sel_rd );

    SC_METHOD(thread_nor_output_V_id_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_260 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_nor_output_V_id_V_1_vld_out);
    sensitive << ( nor_output_V_id_V_1_state );

    SC_METHOD(thread_nor_output_V_keep_V_1_ack_in);
    sensitive << ( nor_output_V_keep_V_1_state );

    SC_METHOD(thread_nor_output_V_keep_V_1_ack_out);
    sensitive << ( nor_output_TREADY );

    SC_METHOD(thread_nor_output_V_keep_V_1_data_out);
    sensitive << ( nor_output_V_keep_V_1_sel );

    SC_METHOD(thread_nor_output_V_keep_V_1_sel);
    sensitive << ( nor_output_V_keep_V_1_sel_rd );

    SC_METHOD(thread_nor_output_V_keep_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_260 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_nor_output_V_keep_V_1_vld_out);
    sensitive << ( nor_output_V_keep_V_1_state );

    SC_METHOD(thread_nor_output_V_last_V_1_ack_in);
    sensitive << ( nor_output_V_last_V_1_state );

    SC_METHOD(thread_nor_output_V_last_V_1_ack_out);
    sensitive << ( nor_output_TREADY );

    SC_METHOD(thread_nor_output_V_last_V_1_data_out);
    sensitive << ( nor_output_V_last_V_1_payload_A );
    sensitive << ( nor_output_V_last_V_1_payload_B );
    sensitive << ( nor_output_V_last_V_1_sel );

    SC_METHOD(thread_nor_output_V_last_V_1_load_A);
    sensitive << ( nor_output_V_last_V_1_sel_wr );
    sensitive << ( nor_output_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_nor_output_V_last_V_1_load_B);
    sensitive << ( nor_output_V_last_V_1_sel_wr );
    sensitive << ( nor_output_V_last_V_1_state_cmp_full );

    SC_METHOD(thread_nor_output_V_last_V_1_sel);
    sensitive << ( nor_output_V_last_V_1_sel_rd );

    SC_METHOD(thread_nor_output_V_last_V_1_state_cmp_full);
    sensitive << ( nor_output_V_last_V_1_state );

    SC_METHOD(thread_nor_output_V_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_260 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_nor_output_V_last_V_1_vld_out);
    sensitive << ( nor_output_V_last_V_1_state );

    SC_METHOD(thread_nor_output_V_strb_V_1_ack_in);
    sensitive << ( nor_output_V_strb_V_1_state );

    SC_METHOD(thread_nor_output_V_strb_V_1_ack_out);
    sensitive << ( nor_output_TREADY );

    SC_METHOD(thread_nor_output_V_strb_V_1_data_out);
    sensitive << ( nor_output_V_strb_V_1_sel );

    SC_METHOD(thread_nor_output_V_strb_V_1_sel);
    sensitive << ( nor_output_V_strb_V_1_sel_rd );

    SC_METHOD(thread_nor_output_V_strb_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_260 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_nor_output_V_strb_V_1_vld_out);
    sensitive << ( nor_output_V_strb_V_1_state );

    SC_METHOD(thread_nor_output_V_user_V_1_ack_in);
    sensitive << ( nor_output_V_user_V_1_state );

    SC_METHOD(thread_nor_output_V_user_V_1_ack_out);
    sensitive << ( nor_output_TREADY );

    SC_METHOD(thread_nor_output_V_user_V_1_data_out);
    sensitive << ( nor_output_V_user_V_1_payload_A );
    sensitive << ( nor_output_V_user_V_1_payload_B );
    sensitive << ( nor_output_V_user_V_1_sel );

    SC_METHOD(thread_nor_output_V_user_V_1_load_A);
    sensitive << ( nor_output_V_user_V_1_sel_wr );
    sensitive << ( nor_output_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_nor_output_V_user_V_1_load_B);
    sensitive << ( nor_output_V_user_V_1_sel_wr );
    sensitive << ( nor_output_V_user_V_1_state_cmp_full );

    SC_METHOD(thread_nor_output_V_user_V_1_sel);
    sensitive << ( nor_output_V_user_V_1_sel_rd );

    SC_METHOD(thread_nor_output_V_user_V_1_state_cmp_full);
    sensitive << ( nor_output_V_user_V_1_state );

    SC_METHOD(thread_nor_output_V_user_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_i_reg_260 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_nor_output_V_user_V_1_vld_out);
    sensitive << ( nor_output_V_user_V_1_state );

    SC_METHOD(thread_r_V_fu_177_p2);
    sensitive << ( cols_V_fu_173_p1 );

    SC_METHOD(thread_rows_V_fu_169_p1);
    sensitive << ( rows );

    SC_METHOD(thread_tmp_data_V_fu_219_p1);
    sensitive << ( nor_mat_data_stream_s_dout );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( nor_output_V_data_V_1_ack_in );
    sensitive << ( nor_output_V_keep_V_1_ack_in );
    sensitive << ( nor_output_V_strb_V_1_ack_in );
    sensitive << ( nor_output_V_user_V_1_ack_in );
    sensitive << ( nor_output_V_last_V_1_ack_in );
    sensitive << ( nor_output_V_id_V_1_ack_in );
    sensitive << ( nor_output_V_dest_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter2 );
    sensitive << ( exitcond2_i_fu_188_p2 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_fu_199_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0001";
    nor_output_V_data_V_1_sel_rd = SC_LOGIC_0;
    nor_output_V_data_V_1_sel_wr = SC_LOGIC_0;
    nor_output_V_data_V_1_state = "00";
    nor_output_V_keep_V_1_sel_rd = SC_LOGIC_0;
    nor_output_V_keep_V_1_state = "00";
    nor_output_V_strb_V_1_sel_rd = SC_LOGIC_0;
    nor_output_V_strb_V_1_state = "00";
    nor_output_V_user_V_1_sel_rd = SC_LOGIC_0;
    nor_output_V_user_V_1_sel_wr = SC_LOGIC_0;
    nor_output_V_user_V_1_state = "00";
    nor_output_V_last_V_1_sel_rd = SC_LOGIC_0;
    nor_output_V_last_V_1_sel_wr = SC_LOGIC_0;
    nor_output_V_last_V_1_state = "00";
    nor_output_V_id_V_1_sel_rd = SC_LOGIC_0;
    nor_output_V_id_V_1_state = "00";
    nor_output_V_dest_V_1_sel_rd = SC_LOGIC_0;
    nor_output_V_dest_V_1_state = "00";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter2 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Mat2AXIvideo_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, rows, "(port)rows");
    sc_trace(mVcdFile, cols, "(port)cols");
    sc_trace(mVcdFile, nor_mat_data_stream_s_dout, "(port)nor_mat_data_stream_s_dout");
    sc_trace(mVcdFile, nor_mat_data_stream_s_empty_n, "(port)nor_mat_data_stream_s_empty_n");
    sc_trace(mVcdFile, nor_mat_data_stream_s_read, "(port)nor_mat_data_stream_s_read");
    sc_trace(mVcdFile, nor_output_TDATA, "(port)nor_output_TDATA");
    sc_trace(mVcdFile, nor_output_TVALID, "(port)nor_output_TVALID");
    sc_trace(mVcdFile, nor_output_TREADY, "(port)nor_output_TREADY");
    sc_trace(mVcdFile, nor_output_TKEEP, "(port)nor_output_TKEEP");
    sc_trace(mVcdFile, nor_output_TSTRB, "(port)nor_output_TSTRB");
    sc_trace(mVcdFile, nor_output_TUSER, "(port)nor_output_TUSER");
    sc_trace(mVcdFile, nor_output_TLAST, "(port)nor_output_TLAST");
    sc_trace(mVcdFile, nor_output_TID, "(port)nor_output_TID");
    sc_trace(mVcdFile, nor_output_TDEST, "(port)nor_output_TDEST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, nor_output_V_data_V_1_data_out, "nor_output_V_data_V_1_data_out");
    sc_trace(mVcdFile, nor_output_V_data_V_1_vld_in, "nor_output_V_data_V_1_vld_in");
    sc_trace(mVcdFile, nor_output_V_data_V_1_vld_out, "nor_output_V_data_V_1_vld_out");
    sc_trace(mVcdFile, nor_output_V_data_V_1_ack_in, "nor_output_V_data_V_1_ack_in");
    sc_trace(mVcdFile, nor_output_V_data_V_1_ack_out, "nor_output_V_data_V_1_ack_out");
    sc_trace(mVcdFile, nor_output_V_data_V_1_payload_A, "nor_output_V_data_V_1_payload_A");
    sc_trace(mVcdFile, nor_output_V_data_V_1_payload_B, "nor_output_V_data_V_1_payload_B");
    sc_trace(mVcdFile, nor_output_V_data_V_1_sel_rd, "nor_output_V_data_V_1_sel_rd");
    sc_trace(mVcdFile, nor_output_V_data_V_1_sel_wr, "nor_output_V_data_V_1_sel_wr");
    sc_trace(mVcdFile, nor_output_V_data_V_1_sel, "nor_output_V_data_V_1_sel");
    sc_trace(mVcdFile, nor_output_V_data_V_1_load_A, "nor_output_V_data_V_1_load_A");
    sc_trace(mVcdFile, nor_output_V_data_V_1_load_B, "nor_output_V_data_V_1_load_B");
    sc_trace(mVcdFile, nor_output_V_data_V_1_state, "nor_output_V_data_V_1_state");
    sc_trace(mVcdFile, nor_output_V_data_V_1_state_cmp_full, "nor_output_V_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, nor_output_V_keep_V_1_data_out, "nor_output_V_keep_V_1_data_out");
    sc_trace(mVcdFile, nor_output_V_keep_V_1_vld_in, "nor_output_V_keep_V_1_vld_in");
    sc_trace(mVcdFile, nor_output_V_keep_V_1_vld_out, "nor_output_V_keep_V_1_vld_out");
    sc_trace(mVcdFile, nor_output_V_keep_V_1_ack_in, "nor_output_V_keep_V_1_ack_in");
    sc_trace(mVcdFile, nor_output_V_keep_V_1_ack_out, "nor_output_V_keep_V_1_ack_out");
    sc_trace(mVcdFile, nor_output_V_keep_V_1_sel_rd, "nor_output_V_keep_V_1_sel_rd");
    sc_trace(mVcdFile, nor_output_V_keep_V_1_sel, "nor_output_V_keep_V_1_sel");
    sc_trace(mVcdFile, nor_output_V_keep_V_1_state, "nor_output_V_keep_V_1_state");
    sc_trace(mVcdFile, nor_output_V_strb_V_1_data_out, "nor_output_V_strb_V_1_data_out");
    sc_trace(mVcdFile, nor_output_V_strb_V_1_vld_in, "nor_output_V_strb_V_1_vld_in");
    sc_trace(mVcdFile, nor_output_V_strb_V_1_vld_out, "nor_output_V_strb_V_1_vld_out");
    sc_trace(mVcdFile, nor_output_V_strb_V_1_ack_in, "nor_output_V_strb_V_1_ack_in");
    sc_trace(mVcdFile, nor_output_V_strb_V_1_ack_out, "nor_output_V_strb_V_1_ack_out");
    sc_trace(mVcdFile, nor_output_V_strb_V_1_sel_rd, "nor_output_V_strb_V_1_sel_rd");
    sc_trace(mVcdFile, nor_output_V_strb_V_1_sel, "nor_output_V_strb_V_1_sel");
    sc_trace(mVcdFile, nor_output_V_strb_V_1_state, "nor_output_V_strb_V_1_state");
    sc_trace(mVcdFile, nor_output_V_user_V_1_data_out, "nor_output_V_user_V_1_data_out");
    sc_trace(mVcdFile, nor_output_V_user_V_1_vld_in, "nor_output_V_user_V_1_vld_in");
    sc_trace(mVcdFile, nor_output_V_user_V_1_vld_out, "nor_output_V_user_V_1_vld_out");
    sc_trace(mVcdFile, nor_output_V_user_V_1_ack_in, "nor_output_V_user_V_1_ack_in");
    sc_trace(mVcdFile, nor_output_V_user_V_1_ack_out, "nor_output_V_user_V_1_ack_out");
    sc_trace(mVcdFile, nor_output_V_user_V_1_payload_A, "nor_output_V_user_V_1_payload_A");
    sc_trace(mVcdFile, nor_output_V_user_V_1_payload_B, "nor_output_V_user_V_1_payload_B");
    sc_trace(mVcdFile, nor_output_V_user_V_1_sel_rd, "nor_output_V_user_V_1_sel_rd");
    sc_trace(mVcdFile, nor_output_V_user_V_1_sel_wr, "nor_output_V_user_V_1_sel_wr");
    sc_trace(mVcdFile, nor_output_V_user_V_1_sel, "nor_output_V_user_V_1_sel");
    sc_trace(mVcdFile, nor_output_V_user_V_1_load_A, "nor_output_V_user_V_1_load_A");
    sc_trace(mVcdFile, nor_output_V_user_V_1_load_B, "nor_output_V_user_V_1_load_B");
    sc_trace(mVcdFile, nor_output_V_user_V_1_state, "nor_output_V_user_V_1_state");
    sc_trace(mVcdFile, nor_output_V_user_V_1_state_cmp_full, "nor_output_V_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, nor_output_V_last_V_1_data_out, "nor_output_V_last_V_1_data_out");
    sc_trace(mVcdFile, nor_output_V_last_V_1_vld_in, "nor_output_V_last_V_1_vld_in");
    sc_trace(mVcdFile, nor_output_V_last_V_1_vld_out, "nor_output_V_last_V_1_vld_out");
    sc_trace(mVcdFile, nor_output_V_last_V_1_ack_in, "nor_output_V_last_V_1_ack_in");
    sc_trace(mVcdFile, nor_output_V_last_V_1_ack_out, "nor_output_V_last_V_1_ack_out");
    sc_trace(mVcdFile, nor_output_V_last_V_1_payload_A, "nor_output_V_last_V_1_payload_A");
    sc_trace(mVcdFile, nor_output_V_last_V_1_payload_B, "nor_output_V_last_V_1_payload_B");
    sc_trace(mVcdFile, nor_output_V_last_V_1_sel_rd, "nor_output_V_last_V_1_sel_rd");
    sc_trace(mVcdFile, nor_output_V_last_V_1_sel_wr, "nor_output_V_last_V_1_sel_wr");
    sc_trace(mVcdFile, nor_output_V_last_V_1_sel, "nor_output_V_last_V_1_sel");
    sc_trace(mVcdFile, nor_output_V_last_V_1_load_A, "nor_output_V_last_V_1_load_A");
    sc_trace(mVcdFile, nor_output_V_last_V_1_load_B, "nor_output_V_last_V_1_load_B");
    sc_trace(mVcdFile, nor_output_V_last_V_1_state, "nor_output_V_last_V_1_state");
    sc_trace(mVcdFile, nor_output_V_last_V_1_state_cmp_full, "nor_output_V_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, nor_output_V_id_V_1_data_out, "nor_output_V_id_V_1_data_out");
    sc_trace(mVcdFile, nor_output_V_id_V_1_vld_in, "nor_output_V_id_V_1_vld_in");
    sc_trace(mVcdFile, nor_output_V_id_V_1_vld_out, "nor_output_V_id_V_1_vld_out");
    sc_trace(mVcdFile, nor_output_V_id_V_1_ack_in, "nor_output_V_id_V_1_ack_in");
    sc_trace(mVcdFile, nor_output_V_id_V_1_ack_out, "nor_output_V_id_V_1_ack_out");
    sc_trace(mVcdFile, nor_output_V_id_V_1_sel_rd, "nor_output_V_id_V_1_sel_rd");
    sc_trace(mVcdFile, nor_output_V_id_V_1_sel, "nor_output_V_id_V_1_sel");
    sc_trace(mVcdFile, nor_output_V_id_V_1_state, "nor_output_V_id_V_1_state");
    sc_trace(mVcdFile, nor_output_V_dest_V_1_data_out, "nor_output_V_dest_V_1_data_out");
    sc_trace(mVcdFile, nor_output_V_dest_V_1_vld_in, "nor_output_V_dest_V_1_vld_in");
    sc_trace(mVcdFile, nor_output_V_dest_V_1_vld_out, "nor_output_V_dest_V_1_vld_out");
    sc_trace(mVcdFile, nor_output_V_dest_V_1_ack_in, "nor_output_V_dest_V_1_ack_in");
    sc_trace(mVcdFile, nor_output_V_dest_V_1_ack_out, "nor_output_V_dest_V_1_ack_out");
    sc_trace(mVcdFile, nor_output_V_dest_V_1_sel_rd, "nor_output_V_dest_V_1_sel_rd");
    sc_trace(mVcdFile, nor_output_V_dest_V_1_sel, "nor_output_V_dest_V_1_sel");
    sc_trace(mVcdFile, nor_output_V_dest_V_1_state, "nor_output_V_dest_V_1_state");
    sc_trace(mVcdFile, nor_mat_data_stream_s_blk_n, "nor_mat_data_stream_s_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_i_reg_260, "exitcond_i_reg_260");
    sc_trace(mVcdFile, nor_output_TDATA_blk_n, "nor_output_TDATA_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter2, "ap_enable_reg_pp0_iter2");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_exitcond_i_reg_260, "ap_reg_pp0_iter1_exitcond_i_reg_260");
    sc_trace(mVcdFile, t_V_13_reg_158, "t_V_13_reg_158");
    sc_trace(mVcdFile, rows_V_fu_169_p1, "rows_V_fu_169_p1");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, cols_V_fu_173_p1, "cols_V_fu_173_p1");
    sc_trace(mVcdFile, r_V_fu_177_p2, "r_V_fu_177_p2");
    sc_trace(mVcdFile, exitcond2_i_fu_188_p2, "exitcond2_i_fu_188_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_block_state2, "ap_block_state2");
    sc_trace(mVcdFile, i_V_fu_193_p2, "i_V_fu_193_p2");
    sc_trace(mVcdFile, i_V_reg_255, "i_V_reg_255");
    sc_trace(mVcdFile, exitcond_i_fu_199_p2, "exitcond_i_fu_199_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter2, "ap_block_state5_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state5_io, "ap_block_state5_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, j_V_fu_204_p2, "j_V_fu_204_p2");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, axi_last_V_fu_210_p2, "axi_last_V_fu_210_p2");
    sc_trace(mVcdFile, axi_last_V_reg_269, "axi_last_V_reg_269");
    sc_trace(mVcdFile, tmp_data_V_fu_219_p1, "tmp_data_V_fu_219_p1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, t_V_reg_147, "t_V_reg_147");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_user_V_fu_96, "tmp_user_V_fu_96");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
}

Mat2AXIvideo::~Mat2AXIvideo() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Mat2AXIvideo::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_ack_in.read())) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_i_fu_188_p2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_ack_in.read())) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_i_fu_188_p2.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            if (esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read())) {
                ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
            } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
                ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter2 = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0)) {
            ap_enable_reg_pp0_iter2 = ap_enable_reg_pp0_iter1.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_ack_in.read())) && 
                    esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_i_fu_188_p2.read()))) {
            ap_enable_reg_pp0_iter2 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_data_V_1_vld_out.read()))) {
            nor_output_V_data_V_1_sel_rd =  (sc_logic) (~nor_output_V_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_data_V_1_ack_in.read()))) {
            nor_output_V_data_V_1_sel_wr =  (sc_logic) (~nor_output_V_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(nor_output_V_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(nor_output_V_data_V_1_state.read(), ap_const_lv2_2)))) {
            nor_output_V_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(nor_output_V_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(nor_output_V_data_V_1_state.read(), ap_const_lv2_1)))) {
            nor_output_V_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(nor_output_V_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(nor_output_V_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(nor_output_V_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_data_V_1_ack_out.read()))))) {
            nor_output_V_data_V_1_state = ap_const_lv2_3;
        } else {
            nor_output_V_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_dest_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_dest_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_dest_V_1_vld_out.read()))) {
            nor_output_V_dest_V_1_sel_rd =  (sc_logic) (~nor_output_V_dest_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_dest_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_dest_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_dest_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, nor_output_V_dest_V_1_state.read())))) {
            nor_output_V_dest_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, nor_output_V_dest_V_1_state.read())))) {
            nor_output_V_dest_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_dest_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, nor_output_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_dest_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, nor_output_V_dest_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_dest_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_dest_V_1_ack_out.read()))))) {
            nor_output_V_dest_V_1_state = ap_const_lv2_3;
        } else {
            nor_output_V_dest_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_id_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_id_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_id_V_1_vld_out.read()))) {
            nor_output_V_id_V_1_sel_rd =  (sc_logic) (~nor_output_V_id_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_id_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_id_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_id_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, nor_output_V_id_V_1_state.read())))) {
            nor_output_V_id_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, nor_output_V_id_V_1_state.read())))) {
            nor_output_V_id_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_id_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, nor_output_V_id_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_id_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, nor_output_V_id_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_id_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_id_V_1_ack_out.read()))))) {
            nor_output_V_id_V_1_state = ap_const_lv2_3;
        } else {
            nor_output_V_id_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_keep_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_keep_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_keep_V_1_vld_out.read()))) {
            nor_output_V_keep_V_1_sel_rd =  (sc_logic) (~nor_output_V_keep_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_keep_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_keep_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_keep_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, nor_output_V_keep_V_1_state.read())))) {
            nor_output_V_keep_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, nor_output_V_keep_V_1_state.read())))) {
            nor_output_V_keep_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_keep_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, nor_output_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_keep_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, nor_output_V_keep_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_keep_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_keep_V_1_ack_out.read()))))) {
            nor_output_V_keep_V_1_state = ap_const_lv2_3;
        } else {
            nor_output_V_keep_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_last_V_1_vld_out.read()))) {
            nor_output_V_last_V_1_sel_rd =  (sc_logic) (~nor_output_V_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_last_V_1_ack_in.read()))) {
            nor_output_V_last_V_1_sel_wr =  (sc_logic) (~nor_output_V_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, nor_output_V_last_V_1_state.read())))) {
            nor_output_V_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, nor_output_V_last_V_1_state.read())))) {
            nor_output_V_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, nor_output_V_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, nor_output_V_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_last_V_1_ack_out.read()))))) {
            nor_output_V_last_V_1_state = ap_const_lv2_3;
        } else {
            nor_output_V_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_strb_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_strb_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_strb_V_1_vld_out.read()))) {
            nor_output_V_strb_V_1_sel_rd =  (sc_logic) (~nor_output_V_strb_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_strb_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_strb_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_strb_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, nor_output_V_strb_V_1_state.read())))) {
            nor_output_V_strb_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, nor_output_V_strb_V_1_state.read())))) {
            nor_output_V_strb_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_strb_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, nor_output_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_strb_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, nor_output_V_strb_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_strb_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_strb_V_1_ack_out.read()))))) {
            nor_output_V_strb_V_1_state = ap_const_lv2_3;
        } else {
            nor_output_V_strb_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_user_V_1_vld_out.read()))) {
            nor_output_V_user_V_1_sel_rd =  (sc_logic) (~nor_output_V_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_user_V_1_ack_in.read()))) {
            nor_output_V_user_V_1_sel_wr =  (sc_logic) (~nor_output_V_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        nor_output_V_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, nor_output_V_user_V_1_state.read())))) {
            nor_output_V_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, nor_output_V_user_V_1_state.read())))) {
            nor_output_V_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, nor_output_V_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, nor_output_V_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, nor_output_V_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_user_V_1_ack_out.read()))))) {
            nor_output_V_user_V_1_state = ap_const_lv2_3;
        } else {
            nor_output_V_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_199_p2.read()))) {
        t_V_13_reg_158 = j_V_fu_204_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_ack_in.read())) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_i_fu_188_p2.read()))) {
        t_V_13_reg_158 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        t_V_reg_147 = i_V_reg_255.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        t_V_reg_147 = ap_const_lv10_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        tmp_user_V_fu_96 = ap_const_lv1_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        tmp_user_V_fu_96 = ap_const_lv1_1;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_exitcond_i_reg_260 = exitcond_i_reg_260.read();
        exitcond_i_reg_260 = exitcond_i_fu_199_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_199_p2.read()))) {
        axi_last_V_reg_269 = axi_last_V_fu_210_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_ack_in.read())))) {
        i_V_reg_255 = i_V_fu_193_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_data_V_1_load_A.read())) {
        nor_output_V_data_V_1_payload_A = tmp_data_V_fu_219_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_data_V_1_load_B.read())) {
        nor_output_V_data_V_1_payload_B = tmp_data_V_fu_219_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_last_V_1_load_A.read())) {
        nor_output_V_last_V_1_payload_A = axi_last_V_reg_269.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_last_V_1_load_B.read())) {
        nor_output_V_last_V_1_payload_B = axi_last_V_reg_269.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_user_V_1_load_A.read())) {
        nor_output_V_user_V_1_payload_A = tmp_user_V_fu_96.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_user_V_1_load_B.read())) {
        nor_output_V_user_V_1_payload_B = tmp_user_V_fu_96.read();
    }
}

void Mat2AXIvideo::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void Mat2AXIvideo::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Mat2AXIvideo::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Mat2AXIvideo::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[3];
}

void Mat2AXIvideo::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Mat2AXIvideo::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && esl_seteq<1,1,1>(ap_const_logic_0, nor_mat_data_stream_s_empty_n.read()));
}

void Mat2AXIvideo::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, nor_mat_data_stream_s_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())));
}

void Mat2AXIvideo::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && 
    esl_seteq<1,1,1>(ap_const_logic_0, nor_mat_data_stream_s_empty_n.read())) || 
   esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read()))) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state5_io.read())));
}

void Mat2AXIvideo::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Mat2AXIvideo::thread_ap_block_state2() {
    ap_block_state2 = (esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_ack_in.read()));
}

void Mat2AXIvideo::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Mat2AXIvideo::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_in.read()));
}

void Mat2AXIvideo::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && esl_seteq<1,1,1>(ap_const_logic_0, nor_mat_data_stream_s_empty_n.read()));
}

void Mat2AXIvideo::thread_ap_block_state5_io() {
    ap_block_state5_io = (esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_i_reg_260.read()) && esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_in.read()));
}

void Mat2AXIvideo::thread_ap_block_state5_pp0_stage0_iter2() {
    ap_block_state5_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Mat2AXIvideo::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_199_p2.read())) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_i_fu_188_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Mat2AXIvideo::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Mat2AXIvideo::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter2.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_ack_in.read())) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_i_fu_188_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_axi_last_V_fu_210_p2() {
    axi_last_V_fu_210_p2 = (!t_V_13_reg_158.read().is_01() || !r_V_fu_177_p2.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_13_reg_158.read() == r_V_fu_177_p2.read());
}

void Mat2AXIvideo::thread_cols_V_fu_173_p1() {
    cols_V_fu_173_p1 = cols.read().range(9-1, 0);
}

void Mat2AXIvideo::thread_exitcond2_i_fu_188_p2() {
    exitcond2_i_fu_188_p2 = (!t_V_reg_147.read().is_01() || !rows_V_fu_169_p1.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_reg_147.read() == rows_V_fu_169_p1.read());
}

void Mat2AXIvideo::thread_exitcond_i_fu_199_p2() {
    exitcond_i_fu_199_p2 = (!t_V_13_reg_158.read().is_01() || !cols_V_fu_173_p1.read().is_01())? sc_lv<1>(): sc_lv<1>(t_V_13_reg_158.read() == cols_V_fu_173_p1.read());
}

void Mat2AXIvideo::thread_i_V_fu_193_p2() {
    i_V_fu_193_p2 = (!t_V_reg_147.read().is_01() || !ap_const_lv10_1.is_01())? sc_lv<10>(): (sc_biguint<10>(t_V_reg_147.read()) + sc_biguint<10>(ap_const_lv10_1));
}

void Mat2AXIvideo::thread_j_V_fu_204_p2() {
    j_V_fu_204_p2 = (!t_V_13_reg_158.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(t_V_13_reg_158.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void Mat2AXIvideo::thread_nor_mat_data_stream_s_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()))) {
        nor_mat_data_stream_s_blk_n = nor_mat_data_stream_s_empty_n.read();
    } else {
        nor_mat_data_stream_s_blk_n = ap_const_logic_1;
    }
}

void Mat2AXIvideo::thread_nor_mat_data_stream_s_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        nor_mat_data_stream_s_read = ap_const_logic_1;
    } else {
        nor_mat_data_stream_s_read = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_nor_output_TDATA() {
    nor_output_TDATA = nor_output_V_data_V_1_data_out.read();
}

void Mat2AXIvideo::thread_nor_output_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read())) || 
         (esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_i_reg_260.read())))) {
        nor_output_TDATA_blk_n = nor_output_V_data_V_1_state.read()[1];
    } else {
        nor_output_TDATA_blk_n = ap_const_logic_1;
    }
}

void Mat2AXIvideo::thread_nor_output_TDEST() {
    nor_output_TDEST = nor_output_V_dest_V_1_data_out.read();
}

void Mat2AXIvideo::thread_nor_output_TID() {
    nor_output_TID = nor_output_V_id_V_1_data_out.read();
}

void Mat2AXIvideo::thread_nor_output_TKEEP() {
    nor_output_TKEEP = nor_output_V_keep_V_1_data_out.read();
}

void Mat2AXIvideo::thread_nor_output_TLAST() {
    nor_output_TLAST = nor_output_V_last_V_1_data_out.read();
}

void Mat2AXIvideo::thread_nor_output_TSTRB() {
    nor_output_TSTRB = nor_output_V_strb_V_1_data_out.read();
}

void Mat2AXIvideo::thread_nor_output_TUSER() {
    nor_output_TUSER = nor_output_V_user_V_1_data_out.read();
}

void Mat2AXIvideo::thread_nor_output_TVALID() {
    nor_output_TVALID = nor_output_V_dest_V_1_state.read()[0];
}

void Mat2AXIvideo::thread_nor_output_V_data_V_1_ack_in() {
    nor_output_V_data_V_1_ack_in = nor_output_V_data_V_1_state.read()[1];
}

void Mat2AXIvideo::thread_nor_output_V_data_V_1_ack_out() {
    nor_output_V_data_V_1_ack_out = nor_output_TREADY.read();
}

void Mat2AXIvideo::thread_nor_output_V_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_data_V_1_sel.read())) {
        nor_output_V_data_V_1_data_out = nor_output_V_data_V_1_payload_B.read();
    } else {
        nor_output_V_data_V_1_data_out = nor_output_V_data_V_1_payload_A.read();
    }
}

void Mat2AXIvideo::thread_nor_output_V_data_V_1_load_A() {
    nor_output_V_data_V_1_load_A = (nor_output_V_data_V_1_state_cmp_full.read() & ~nor_output_V_data_V_1_sel_wr.read());
}

void Mat2AXIvideo::thread_nor_output_V_data_V_1_load_B() {
    nor_output_V_data_V_1_load_B = (nor_output_V_data_V_1_sel_wr.read() & nor_output_V_data_V_1_state_cmp_full.read());
}

void Mat2AXIvideo::thread_nor_output_V_data_V_1_sel() {
    nor_output_V_data_V_1_sel = nor_output_V_data_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_nor_output_V_data_V_1_state_cmp_full() {
    nor_output_V_data_V_1_state_cmp_full =  (sc_logic) ((!nor_output_V_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(nor_output_V_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void Mat2AXIvideo::thread_nor_output_V_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        nor_output_V_data_V_1_vld_in = ap_const_logic_1;
    } else {
        nor_output_V_data_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_nor_output_V_data_V_1_vld_out() {
    nor_output_V_data_V_1_vld_out = nor_output_V_data_V_1_state.read()[0];
}

void Mat2AXIvideo::thread_nor_output_V_dest_V_1_ack_in() {
    nor_output_V_dest_V_1_ack_in = nor_output_V_dest_V_1_state.read()[1];
}

void Mat2AXIvideo::thread_nor_output_V_dest_V_1_ack_out() {
    nor_output_V_dest_V_1_ack_out = nor_output_TREADY.read();
}

void Mat2AXIvideo::thread_nor_output_V_dest_V_1_data_out() {
    nor_output_V_dest_V_1_data_out = ap_const_lv1_0;
}

void Mat2AXIvideo::thread_nor_output_V_dest_V_1_sel() {
    nor_output_V_dest_V_1_sel = nor_output_V_dest_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_nor_output_V_dest_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        nor_output_V_dest_V_1_vld_in = ap_const_logic_1;
    } else {
        nor_output_V_dest_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_nor_output_V_dest_V_1_vld_out() {
    nor_output_V_dest_V_1_vld_out = nor_output_V_dest_V_1_state.read()[0];
}

void Mat2AXIvideo::thread_nor_output_V_id_V_1_ack_in() {
    nor_output_V_id_V_1_ack_in = nor_output_V_id_V_1_state.read()[1];
}

void Mat2AXIvideo::thread_nor_output_V_id_V_1_ack_out() {
    nor_output_V_id_V_1_ack_out = nor_output_TREADY.read();
}

void Mat2AXIvideo::thread_nor_output_V_id_V_1_data_out() {
    nor_output_V_id_V_1_data_out = ap_const_lv1_0;
}

void Mat2AXIvideo::thread_nor_output_V_id_V_1_sel() {
    nor_output_V_id_V_1_sel = nor_output_V_id_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_nor_output_V_id_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        nor_output_V_id_V_1_vld_in = ap_const_logic_1;
    } else {
        nor_output_V_id_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_nor_output_V_id_V_1_vld_out() {
    nor_output_V_id_V_1_vld_out = nor_output_V_id_V_1_state.read()[0];
}

void Mat2AXIvideo::thread_nor_output_V_keep_V_1_ack_in() {
    nor_output_V_keep_V_1_ack_in = nor_output_V_keep_V_1_state.read()[1];
}

void Mat2AXIvideo::thread_nor_output_V_keep_V_1_ack_out() {
    nor_output_V_keep_V_1_ack_out = nor_output_TREADY.read();
}

void Mat2AXIvideo::thread_nor_output_V_keep_V_1_data_out() {
    nor_output_V_keep_V_1_data_out = ap_const_lv4_F;
}

void Mat2AXIvideo::thread_nor_output_V_keep_V_1_sel() {
    nor_output_V_keep_V_1_sel = nor_output_V_keep_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_nor_output_V_keep_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        nor_output_V_keep_V_1_vld_in = ap_const_logic_1;
    } else {
        nor_output_V_keep_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_nor_output_V_keep_V_1_vld_out() {
    nor_output_V_keep_V_1_vld_out = nor_output_V_keep_V_1_state.read()[0];
}

void Mat2AXIvideo::thread_nor_output_V_last_V_1_ack_in() {
    nor_output_V_last_V_1_ack_in = nor_output_V_last_V_1_state.read()[1];
}

void Mat2AXIvideo::thread_nor_output_V_last_V_1_ack_out() {
    nor_output_V_last_V_1_ack_out = nor_output_TREADY.read();
}

void Mat2AXIvideo::thread_nor_output_V_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_last_V_1_sel.read())) {
        nor_output_V_last_V_1_data_out = nor_output_V_last_V_1_payload_B.read();
    } else {
        nor_output_V_last_V_1_data_out = nor_output_V_last_V_1_payload_A.read();
    }
}

void Mat2AXIvideo::thread_nor_output_V_last_V_1_load_A() {
    nor_output_V_last_V_1_load_A = (nor_output_V_last_V_1_state_cmp_full.read() & ~nor_output_V_last_V_1_sel_wr.read());
}

void Mat2AXIvideo::thread_nor_output_V_last_V_1_load_B() {
    nor_output_V_last_V_1_load_B = (nor_output_V_last_V_1_sel_wr.read() & nor_output_V_last_V_1_state_cmp_full.read());
}

void Mat2AXIvideo::thread_nor_output_V_last_V_1_sel() {
    nor_output_V_last_V_1_sel = nor_output_V_last_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_nor_output_V_last_V_1_state_cmp_full() {
    nor_output_V_last_V_1_state_cmp_full =  (sc_logic) ((!nor_output_V_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(nor_output_V_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void Mat2AXIvideo::thread_nor_output_V_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        nor_output_V_last_V_1_vld_in = ap_const_logic_1;
    } else {
        nor_output_V_last_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_nor_output_V_last_V_1_vld_out() {
    nor_output_V_last_V_1_vld_out = nor_output_V_last_V_1_state.read()[0];
}

void Mat2AXIvideo::thread_nor_output_V_strb_V_1_ack_in() {
    nor_output_V_strb_V_1_ack_in = nor_output_V_strb_V_1_state.read()[1];
}

void Mat2AXIvideo::thread_nor_output_V_strb_V_1_ack_out() {
    nor_output_V_strb_V_1_ack_out = nor_output_TREADY.read();
}

void Mat2AXIvideo::thread_nor_output_V_strb_V_1_data_out() {
    nor_output_V_strb_V_1_data_out = ap_const_lv4_0;
}

void Mat2AXIvideo::thread_nor_output_V_strb_V_1_sel() {
    nor_output_V_strb_V_1_sel = nor_output_V_strb_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_nor_output_V_strb_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        nor_output_V_strb_V_1_vld_in = ap_const_logic_1;
    } else {
        nor_output_V_strb_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_nor_output_V_strb_V_1_vld_out() {
    nor_output_V_strb_V_1_vld_out = nor_output_V_strb_V_1_state.read()[0];
}

void Mat2AXIvideo::thread_nor_output_V_user_V_1_ack_in() {
    nor_output_V_user_V_1_ack_in = nor_output_V_user_V_1_state.read()[1];
}

void Mat2AXIvideo::thread_nor_output_V_user_V_1_ack_out() {
    nor_output_V_user_V_1_ack_out = nor_output_TREADY.read();
}

void Mat2AXIvideo::thread_nor_output_V_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, nor_output_V_user_V_1_sel.read())) {
        nor_output_V_user_V_1_data_out = nor_output_V_user_V_1_payload_B.read();
    } else {
        nor_output_V_user_V_1_data_out = nor_output_V_user_V_1_payload_A.read();
    }
}

void Mat2AXIvideo::thread_nor_output_V_user_V_1_load_A() {
    nor_output_V_user_V_1_load_A = (nor_output_V_user_V_1_state_cmp_full.read() & ~nor_output_V_user_V_1_sel_wr.read());
}

void Mat2AXIvideo::thread_nor_output_V_user_V_1_load_B() {
    nor_output_V_user_V_1_load_B = (nor_output_V_user_V_1_sel_wr.read() & nor_output_V_user_V_1_state_cmp_full.read());
}

void Mat2AXIvideo::thread_nor_output_V_user_V_1_sel() {
    nor_output_V_user_V_1_sel = nor_output_V_user_V_1_sel_rd.read();
}

void Mat2AXIvideo::thread_nor_output_V_user_V_1_state_cmp_full() {
    nor_output_V_user_V_1_state_cmp_full =  (sc_logic) ((!nor_output_V_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(nor_output_V_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void Mat2AXIvideo::thread_nor_output_V_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_reg_260.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        nor_output_V_user_V_1_vld_in = ap_const_logic_1;
    } else {
        nor_output_V_user_V_1_vld_in = ap_const_logic_0;
    }
}

void Mat2AXIvideo::thread_nor_output_V_user_V_1_vld_out() {
    nor_output_V_user_V_1_vld_out = nor_output_V_user_V_1_state.read()[0];
}

void Mat2AXIvideo::thread_r_V_fu_177_p2() {
    r_V_fu_177_p2 = (!ap_const_lv9_1FF.is_01() || !cols_V_fu_173_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(ap_const_lv9_1FF) + sc_biguint<9>(cols_V_fu_173_p1.read()));
}

void Mat2AXIvideo::thread_rows_V_fu_169_p1() {
    rows_V_fu_169_p1 = rows.read().range(10-1, 0);
}

void Mat2AXIvideo::thread_tmp_data_V_fu_219_p1() {
    tmp_data_V_fu_219_p1 = nor_mat_data_stream_s_dout.read();
}

void Mat2AXIvideo::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_i_fu_188_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_keep_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_strb_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_user_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_id_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, nor_output_V_dest_V_1_ack_in.read())) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_i_fu_188_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((!(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_199_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter2.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
  esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_199_p2.read()) && 
  esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXX";
            break;
    }
}

}

