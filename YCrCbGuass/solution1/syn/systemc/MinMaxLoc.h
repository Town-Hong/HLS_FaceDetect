// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _MinMaxLoc_HH_
#define _MinMaxLoc_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "ImgProcess_Top_fpkbM.h"

namespace ap_rtl {

struct MinMaxLoc : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > src_data_stream_V_dout;
    sc_in< sc_logic > src_data_stream_V_empty_n;
    sc_out< sc_logic > src_data_stream_V_read;
    sc_out< sc_lv<64> > min_val_out_din;
    sc_in< sc_logic > min_val_out_full_n;
    sc_out< sc_logic > min_val_out_write;
    sc_out< sc_lv<64> > max_val_out_din;
    sc_in< sc_logic > max_val_out_full_n;
    sc_out< sc_logic > max_val_out_write;


    // Module declarations
    MinMaxLoc(sc_module_name name);
    SC_HAS_PROCESS(MinMaxLoc);

    ~MinMaxLoc();

    sc_trace_file* mVcdFile;

    ImgProcess_Top_fpkbM<1,1,32,64>* ImgProcess_Top_fpkbM_U69;
    ImgProcess_Top_fpkbM<1,1,32,64>* ImgProcess_Top_fpkbM_U70;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > src_data_stream_V_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_i_i_reg_362;
    sc_signal< sc_logic > min_val_out_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > max_val_out_blk_n;
    sc_signal< sc_lv<9> > t_V_10_reg_109;
    sc_signal< sc_lv<1> > exitcond139_i_i_fu_144_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<10> > i_V_fu_150_p2;
    sc_signal< sc_lv<10> > i_V_reg_347;
    sc_signal< sc_lv<64> > min_val_dc_fu_120_p1;
    sc_signal< sc_lv<64> > min_val_dc_reg_352;
    sc_signal< sc_lv<64> > max_val_dc_fu_123_p1;
    sc_signal< sc_lv<64> > max_val_dc_reg_357;
    sc_signal< sc_lv<1> > exitcond_i_i_fu_156_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state5_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_i_i_reg_362;
    sc_signal< sc_lv<9> > j_V_fu_162_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<32> > tmp_43_reg_371;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<10> > t_V_reg_98;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< bool > ap_block_state7;
    sc_signal< sc_lv<32> > v_assign_1_fu_70;
    sc_signal< sc_lv<32> > p_max_val_4_i_i_fu_311_p3;
    sc_signal< sc_lv<32> > v_assign_fu_74;
    sc_signal< sc_lv<32> > p_min_val_4_i_i_fu_259_p3;
    sc_signal< sc_lv<32> > t_V_5_fu_168_p1;
    sc_signal< sc_lv<32> > t_V_9_fu_180_p1;
    sc_signal< sc_lv<32> > t_V_8_fu_192_p1;
    sc_signal< sc_lv<1> > p_Result_2_fu_172_p3;
    sc_signal< sc_lv<1> > p_Result_s_fu_195_p3;
    sc_signal< sc_lv<31> > tmp_fu_209_p1;
    sc_signal< sc_lv<31> > tmp_41_fu_221_p1;
    sc_signal< sc_lv<32> > p_Result_9_fu_213_p3;
    sc_signal< sc_lv<32> > p_Result_10_fu_225_p3;
    sc_signal< sc_lv<1> > tmp_38_i_fu_233_p2;
    sc_signal< sc_lv<1> > tmp_41_i_fu_246_p2;
    sc_signal< sc_lv<1> > brmerge_demorgan_i_fu_203_p2;
    sc_signal< sc_lv<32> > s_val_0_i_f_assign_s_fu_239_p3;
    sc_signal< sc_lv<32> > s_val_0_i_f_assign_1_fu_252_p3;
    sc_signal< sc_lv<1> > p_Result_7_fu_184_p3;
    sc_signal< sc_lv<31> > tmp_42_fu_273_p1;
    sc_signal< sc_lv<32> > p_Result_11_fu_277_p3;
    sc_signal< sc_lv<1> > tmp_44_i_fu_285_p2;
    sc_signal< sc_lv<1> > tmp_47_i_fu_298_p2;
    sc_signal< sc_lv<1> > brmerge35_demorgan_i_fu_267_p2;
    sc_signal< sc_lv<32> > s_val_0_i_f_assign_2_fu_291_p3;
    sc_signal< sc_lv<32> > s_val_0_i_f_assign_3_fu_304_p3;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const sc_lv<5> ap_ST_fsm_state7;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<32> ap_const_lv32_CF000000;
    static const sc_lv<32> ap_const_lv32_4F000000;
    static const sc_lv<10> ap_const_lv10_2D0;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<9> ap_const_lv9_1E0;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<32> ap_const_lv32_1F;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage0_iter2();
    void thread_ap_block_state7();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_brmerge35_demorgan_i_fu_267_p2();
    void thread_brmerge_demorgan_i_fu_203_p2();
    void thread_exitcond139_i_i_fu_144_p2();
    void thread_exitcond_i_i_fu_156_p2();
    void thread_i_V_fu_150_p2();
    void thread_j_V_fu_162_p2();
    void thread_max_val_out_blk_n();
    void thread_max_val_out_din();
    void thread_max_val_out_write();
    void thread_min_val_out_blk_n();
    void thread_min_val_out_din();
    void thread_min_val_out_write();
    void thread_p_Result_10_fu_225_p3();
    void thread_p_Result_11_fu_277_p3();
    void thread_p_Result_2_fu_172_p3();
    void thread_p_Result_7_fu_184_p3();
    void thread_p_Result_9_fu_213_p3();
    void thread_p_Result_s_fu_195_p3();
    void thread_p_max_val_4_i_i_fu_311_p3();
    void thread_p_min_val_4_i_i_fu_259_p3();
    void thread_s_val_0_i_f_assign_1_fu_252_p3();
    void thread_s_val_0_i_f_assign_2_fu_291_p3();
    void thread_s_val_0_i_f_assign_3_fu_304_p3();
    void thread_s_val_0_i_f_assign_s_fu_239_p3();
    void thread_src_data_stream_V_blk_n();
    void thread_src_data_stream_V_read();
    void thread_t_V_5_fu_168_p1();
    void thread_t_V_8_fu_192_p1();
    void thread_t_V_9_fu_180_p1();
    void thread_tmp_38_i_fu_233_p2();
    void thread_tmp_41_fu_221_p1();
    void thread_tmp_41_i_fu_246_p2();
    void thread_tmp_42_fu_273_p1();
    void thread_tmp_44_i_fu_285_p2();
    void thread_tmp_47_i_fu_298_p2();
    void thread_tmp_fu_209_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
