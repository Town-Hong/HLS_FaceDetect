// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "erode_dilate.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic erode_dilate::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> erode_dilate::ap_const_lv8_0 = "00000000";
const sc_logic erode_dilate::ap_const_logic_1 = sc_dt::Log_1;

erode_dilate::erode_dilate(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Erode_U0 = new Erode("Erode_U0");
    Erode_U0->ap_clk(ap_clk);
    Erode_U0->ap_rst(ap_rst);
    Erode_U0->ap_start(Erode_U0_ap_start);
    Erode_U0->start_full_n(start_for_Dilate_U0_full_n);
    Erode_U0->ap_done(Erode_U0_ap_done);
    Erode_U0->ap_continue(Erode_U0_ap_continue);
    Erode_U0->ap_idle(Erode_U0_ap_idle);
    Erode_U0->ap_ready(Erode_U0_ap_ready);
    Erode_U0->start_out(Erode_U0_start_out);
    Erode_U0->start_write(Erode_U0_start_write);
    Erode_U0->p_src_data_stream_V_dout(img_data_stream_V_dout);
    Erode_U0->p_src_data_stream_V_empty_n(img_data_stream_V_empty_n);
    Erode_U0->p_src_data_stream_V_read(Erode_U0_p_src_data_stream_V_read);
    Erode_U0->p_dst_data_stream_V_din(Erode_U0_p_dst_data_stream_V_din);
    Erode_U0->p_dst_data_stream_V_full_n(tmp_img_data_stream_s_full_n);
    Erode_U0->p_dst_data_stream_V_write(Erode_U0_p_dst_data_stream_V_write);
    Dilate_U0 = new Dilate("Dilate_U0");
    Dilate_U0->ap_clk(ap_clk);
    Dilate_U0->ap_rst(ap_rst);
    Dilate_U0->ap_start(Dilate_U0_ap_start);
    Dilate_U0->ap_done(Dilate_U0_ap_done);
    Dilate_U0->ap_continue(Dilate_U0_ap_continue);
    Dilate_U0->ap_idle(Dilate_U0_ap_idle);
    Dilate_U0->ap_ready(Dilate_U0_ap_ready);
    Dilate_U0->p_src_data_stream_V_dout(tmp_img_data_stream_s_dout);
    Dilate_U0->p_src_data_stream_V_empty_n(tmp_img_data_stream_s_empty_n);
    Dilate_U0->p_src_data_stream_V_read(Dilate_U0_p_src_data_stream_V_read);
    Dilate_U0->p_dst_data_stream_V_din(Dilate_U0_p_dst_data_stream_V_din);
    Dilate_U0->p_dst_data_stream_V_full_n(res_data_stream_V_full_n);
    Dilate_U0->p_dst_data_stream_V_write(Dilate_U0_p_dst_data_stream_V_write);
    tmp_img_data_stream_s_U = new fifo_w8_d1_A("tmp_img_data_stream_s_U");
    tmp_img_data_stream_s_U->clk(ap_clk);
    tmp_img_data_stream_s_U->reset(ap_rst);
    tmp_img_data_stream_s_U->if_read_ce(ap_var_for_const0);
    tmp_img_data_stream_s_U->if_write_ce(ap_var_for_const0);
    tmp_img_data_stream_s_U->if_din(Erode_U0_p_dst_data_stream_V_din);
    tmp_img_data_stream_s_U->if_full_n(tmp_img_data_stream_s_full_n);
    tmp_img_data_stream_s_U->if_write(Erode_U0_p_dst_data_stream_V_write);
    tmp_img_data_stream_s_U->if_dout(tmp_img_data_stream_s_dout);
    tmp_img_data_stream_s_U->if_empty_n(tmp_img_data_stream_s_empty_n);
    tmp_img_data_stream_s_U->if_read(Dilate_U0_p_src_data_stream_V_read);
    start_for_Dilate_U0_U = new start_for_Dilate_U0("start_for_Dilate_U0_U");
    start_for_Dilate_U0_U->clk(ap_clk);
    start_for_Dilate_U0_U->reset(ap_rst);
    start_for_Dilate_U0_U->if_read_ce(ap_var_for_const0);
    start_for_Dilate_U0_U->if_write_ce(ap_var_for_const0);
    start_for_Dilate_U0_U->if_din(start_for_Dilate_U0_din);
    start_for_Dilate_U0_U->if_full_n(start_for_Dilate_U0_full_n);
    start_for_Dilate_U0_U->if_write(Erode_U0_start_write);
    start_for_Dilate_U0_U->if_dout(start_for_Dilate_U0_dout);
    start_for_Dilate_U0_U->if_empty_n(start_for_Dilate_U0_empty_n);
    start_for_Dilate_U0_U->if_read(Dilate_U0_ap_ready);

    SC_METHOD(thread_Dilate_U0_ap_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_Dilate_U0_ap_start);
    sensitive << ( start_for_Dilate_U0_empty_n );

    SC_METHOD(thread_Dilate_U0_start_full_n);

    SC_METHOD(thread_Dilate_U0_start_write);

    SC_METHOD(thread_Erode_U0_ap_continue);

    SC_METHOD(thread_Erode_U0_ap_start);
    sensitive << ( ap_rst );
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_done);
    sensitive << ( Dilate_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Erode_U0_ap_idle );
    sensitive << ( Dilate_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( Erode_U0_ap_ready );

    SC_METHOD(thread_ap_sync_continue);
    sensitive << ( ap_continue );

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( Dilate_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( Erode_U0_ap_ready );

    SC_METHOD(thread_img_data_stream_V_read);
    sensitive << ( Erode_U0_p_src_data_stream_V_read );

    SC_METHOD(thread_res_data_stream_V_din);
    sensitive << ( Dilate_U0_p_dst_data_stream_V_din );

    SC_METHOD(thread_res_data_stream_V_write);
    sensitive << ( Dilate_U0_p_dst_data_stream_V_write );

    SC_METHOD(thread_start_for_Dilate_U0_din);

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "erode_dilate_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, img_data_stream_V_dout, "(port)img_data_stream_V_dout");
    sc_trace(mVcdFile, img_data_stream_V_empty_n, "(port)img_data_stream_V_empty_n");
    sc_trace(mVcdFile, img_data_stream_V_read, "(port)img_data_stream_V_read");
    sc_trace(mVcdFile, res_data_stream_V_din, "(port)res_data_stream_V_din");
    sc_trace(mVcdFile, res_data_stream_V_full_n, "(port)res_data_stream_V_full_n");
    sc_trace(mVcdFile, res_data_stream_V_write, "(port)res_data_stream_V_write");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, Erode_U0_ap_start, "Erode_U0_ap_start");
    sc_trace(mVcdFile, Erode_U0_ap_done, "Erode_U0_ap_done");
    sc_trace(mVcdFile, Erode_U0_ap_continue, "Erode_U0_ap_continue");
    sc_trace(mVcdFile, Erode_U0_ap_idle, "Erode_U0_ap_idle");
    sc_trace(mVcdFile, Erode_U0_ap_ready, "Erode_U0_ap_ready");
    sc_trace(mVcdFile, Erode_U0_start_out, "Erode_U0_start_out");
    sc_trace(mVcdFile, Erode_U0_start_write, "Erode_U0_start_write");
    sc_trace(mVcdFile, Erode_U0_p_src_data_stream_V_read, "Erode_U0_p_src_data_stream_V_read");
    sc_trace(mVcdFile, Erode_U0_p_dst_data_stream_V_din, "Erode_U0_p_dst_data_stream_V_din");
    sc_trace(mVcdFile, Erode_U0_p_dst_data_stream_V_write, "Erode_U0_p_dst_data_stream_V_write");
    sc_trace(mVcdFile, Dilate_U0_ap_start, "Dilate_U0_ap_start");
    sc_trace(mVcdFile, Dilate_U0_ap_done, "Dilate_U0_ap_done");
    sc_trace(mVcdFile, Dilate_U0_ap_continue, "Dilate_U0_ap_continue");
    sc_trace(mVcdFile, Dilate_U0_ap_idle, "Dilate_U0_ap_idle");
    sc_trace(mVcdFile, Dilate_U0_ap_ready, "Dilate_U0_ap_ready");
    sc_trace(mVcdFile, Dilate_U0_p_src_data_stream_V_read, "Dilate_U0_p_src_data_stream_V_read");
    sc_trace(mVcdFile, Dilate_U0_p_dst_data_stream_V_din, "Dilate_U0_p_dst_data_stream_V_din");
    sc_trace(mVcdFile, Dilate_U0_p_dst_data_stream_V_write, "Dilate_U0_p_dst_data_stream_V_write");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, tmp_img_data_stream_s_full_n, "tmp_img_data_stream_s_full_n");
    sc_trace(mVcdFile, tmp_img_data_stream_s_dout, "tmp_img_data_stream_s_dout");
    sc_trace(mVcdFile, tmp_img_data_stream_s_empty_n, "tmp_img_data_stream_s_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, start_for_Dilate_U0_din, "start_for_Dilate_U0_din");
    sc_trace(mVcdFile, start_for_Dilate_U0_full_n, "start_for_Dilate_U0_full_n");
    sc_trace(mVcdFile, start_for_Dilate_U0_dout, "start_for_Dilate_U0_dout");
    sc_trace(mVcdFile, start_for_Dilate_U0_empty_n, "start_for_Dilate_U0_empty_n");
    sc_trace(mVcdFile, Dilate_U0_start_full_n, "Dilate_U0_start_full_n");
    sc_trace(mVcdFile, Dilate_U0_start_write, "Dilate_U0_start_write");
#endif

    }
}

erode_dilate::~erode_dilate() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete Erode_U0;
    delete Dilate_U0;
    delete tmp_img_data_stream_s_U;
    delete start_for_Dilate_U0_U;
}

void erode_dilate::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void erode_dilate::thread_Dilate_U0_ap_continue() {
    Dilate_U0_ap_continue = ap_continue.read();
}

void erode_dilate::thread_Dilate_U0_ap_start() {
    Dilate_U0_ap_start = start_for_Dilate_U0_empty_n.read();
}

void erode_dilate::thread_Dilate_U0_start_full_n() {
    Dilate_U0_start_full_n = ap_const_logic_1;
}

void erode_dilate::thread_Dilate_U0_start_write() {
    Dilate_U0_start_write = ap_const_logic_0;
}

void erode_dilate::thread_Erode_U0_ap_continue() {
    Erode_U0_ap_continue = ap_const_logic_1;
}

void erode_dilate::thread_Erode_U0_ap_start() {
    if ( ap_rst.read() == ap_const_logic_1) {
        Erode_U0_ap_start = ap_const_logic_0;
    } else {
        Erode_U0_ap_start = ap_start.read();
    }
}

void erode_dilate::thread_ap_done() {
    ap_done = Dilate_U0_ap_done.read();
}

void erode_dilate::thread_ap_idle() {
    ap_idle = (Erode_U0_ap_idle.read() & Dilate_U0_ap_idle.read());
}

void erode_dilate::thread_ap_ready() {
    ap_ready = Erode_U0_ap_ready.read();
}

void erode_dilate::thread_ap_sync_continue() {
    ap_sync_continue = ap_continue.read();
}

void erode_dilate::thread_ap_sync_done() {
    ap_sync_done = Dilate_U0_ap_done.read();
}

void erode_dilate::thread_ap_sync_ready() {
    ap_sync_ready = Erode_U0_ap_ready.read();
}

void erode_dilate::thread_img_data_stream_V_read() {
    img_data_stream_V_read = Erode_U0_p_src_data_stream_V_read.read();
}

void erode_dilate::thread_res_data_stream_V_din() {
    res_data_stream_V_din = Dilate_U0_p_dst_data_stream_V_din.read();
}

void erode_dilate::thread_res_data_stream_V_write() {
    res_data_stream_V_write = Dilate_U0_p_dst_data_stream_V_write.read();
}

void erode_dilate::thread_start_for_Dilate_U0_din() {
    start_for_Dilate_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

}

