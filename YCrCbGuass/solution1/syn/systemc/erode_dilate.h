// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _erode_dilate_HH_
#define _erode_dilate_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Erode.h"
#include "Dilate.h"
#include "fifo_w8_d1_A.h"
#include "start_for_Dilate_U0.h"

namespace ap_rtl {

struct erode_dilate : public sc_module {
    // Port declarations 13
    sc_in< sc_lv<8> > img_data_stream_V_dout;
    sc_in< sc_logic > img_data_stream_V_empty_n;
    sc_out< sc_logic > img_data_stream_V_read;
    sc_out< sc_lv<8> > res_data_stream_V_din;
    sc_in< sc_logic > res_data_stream_V_full_n;
    sc_out< sc_logic > res_data_stream_V_write;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_in< sc_logic > ap_continue;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    erode_dilate(sc_module_name name);
    SC_HAS_PROCESS(erode_dilate);

    ~erode_dilate();

    sc_trace_file* mVcdFile;

    Erode* Erode_U0;
    Dilate* Dilate_U0;
    fifo_w8_d1_A* tmp_img_data_stream_s_U;
    start_for_Dilate_U0* start_for_Dilate_U0_U;
    sc_signal< sc_logic > Erode_U0_ap_start;
    sc_signal< sc_logic > Erode_U0_ap_done;
    sc_signal< sc_logic > Erode_U0_ap_continue;
    sc_signal< sc_logic > Erode_U0_ap_idle;
    sc_signal< sc_logic > Erode_U0_ap_ready;
    sc_signal< sc_logic > Erode_U0_start_out;
    sc_signal< sc_logic > Erode_U0_start_write;
    sc_signal< sc_logic > Erode_U0_p_src_data_stream_V_read;
    sc_signal< sc_lv<8> > Erode_U0_p_dst_data_stream_V_din;
    sc_signal< sc_logic > Erode_U0_p_dst_data_stream_V_write;
    sc_signal< sc_logic > Dilate_U0_ap_start;
    sc_signal< sc_logic > Dilate_U0_ap_done;
    sc_signal< sc_logic > Dilate_U0_ap_continue;
    sc_signal< sc_logic > Dilate_U0_ap_idle;
    sc_signal< sc_logic > Dilate_U0_ap_ready;
    sc_signal< sc_logic > Dilate_U0_p_src_data_stream_V_read;
    sc_signal< sc_lv<8> > Dilate_U0_p_dst_data_stream_V_din;
    sc_signal< sc_logic > Dilate_U0_p_dst_data_stream_V_write;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > tmp_img_data_stream_s_full_n;
    sc_signal< sc_lv<8> > tmp_img_data_stream_s_dout;
    sc_signal< sc_logic > tmp_img_data_stream_s_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_lv<1> > start_for_Dilate_U0_din;
    sc_signal< sc_logic > start_for_Dilate_U0_full_n;
    sc_signal< sc_lv<1> > start_for_Dilate_U0_dout;
    sc_signal< sc_logic > start_for_Dilate_U0_empty_n;
    sc_signal< sc_logic > Dilate_U0_start_full_n;
    sc_signal< sc_logic > Dilate_U0_start_write;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_logic ap_const_logic_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_Dilate_U0_ap_continue();
    void thread_Dilate_U0_ap_start();
    void thread_Dilate_U0_start_full_n();
    void thread_Dilate_U0_start_write();
    void thread_Erode_U0_ap_continue();
    void thread_Erode_U0_ap_start();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_img_data_stream_V_read();
    void thread_res_data_stream_V_din();
    void thread_res_data_stream_V_write();
    void thread_start_for_Dilate_U0_din();
};

}

using namespace ap_rtl;

#endif
