// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module normalized (
        ap_start,
        start_full_n,
        start_out,
        start_write,
        sim_data_stream_V_dout,
        sim_data_stream_V_empty_n,
        sim_data_stream_V_read,
        nor_data_stream_V_din,
        nor_data_stream_V_full_n,
        nor_data_stream_V_write,
        gray_data_stream_V_din,
        gray_data_stream_V_full_n,
        gray_data_stream_V_write,
        max_dout,
        max_empty_n,
        max_read,
        min_dout,
        min_empty_n,
        min_read,
        ap_clk,
        ap_rst,
        ap_done,
        ap_ready,
        ap_idle,
        ap_continue
);


input   ap_start;
input   start_full_n;
output   start_out;
output   start_write;
input  [31:0] sim_data_stream_V_dout;
input   sim_data_stream_V_empty_n;
output   sim_data_stream_V_read;
output  [31:0] nor_data_stream_V_din;
input   nor_data_stream_V_full_n;
output   nor_data_stream_V_write;
output  [7:0] gray_data_stream_V_din;
input   gray_data_stream_V_full_n;
output   gray_data_stream_V_write;
input  [63:0] max_dout;
input   max_empty_n;
output   max_read;
input  [63:0] min_dout;
input   min_empty_n;
output   min_read;
input   ap_clk;
input   ap_rst;
output   ap_done;
output   ap_ready;
output   ap_idle;
input   ap_continue;

reg start_write;

reg    real_start;
reg    start_once_reg;
wire    internal_ap_ready;
wire    normalized_Loop_loop_U0_ap_start;
wire    normalized_Loop_loop_U0_ap_done;
wire    normalized_Loop_loop_U0_ap_continue;
wire    normalized_Loop_loop_U0_ap_idle;
wire    normalized_Loop_loop_U0_ap_ready;
wire    normalized_Loop_loop_U0_max_read;
wire    normalized_Loop_loop_U0_min_read;
wire    normalized_Loop_loop_U0_sim_data_stream_V_read;
wire   [31:0] normalized_Loop_loop_U0_nor_data_stream_V_din;
wire    normalized_Loop_loop_U0_nor_data_stream_V_write;
wire   [7:0] normalized_Loop_loop_U0_gray_data_stream_V_din;
wire    normalized_Loop_loop_U0_gray_data_stream_V_write;
wire    ap_sync_continue;
wire    ap_sync_done;
wire    ap_sync_ready;
wire    normalized_Loop_loop_U0_start_full_n;
wire    normalized_Loop_loop_U0_start_write;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
end

normalized_Loop_loop normalized_Loop_loop_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(normalized_Loop_loop_U0_ap_start),
    .ap_done(normalized_Loop_loop_U0_ap_done),
    .ap_continue(normalized_Loop_loop_U0_ap_continue),
    .ap_idle(normalized_Loop_loop_U0_ap_idle),
    .ap_ready(normalized_Loop_loop_U0_ap_ready),
    .max_dout(max_dout),
    .max_empty_n(max_empty_n),
    .max_read(normalized_Loop_loop_U0_max_read),
    .min_dout(min_dout),
    .min_empty_n(min_empty_n),
    .min_read(normalized_Loop_loop_U0_min_read),
    .sim_data_stream_V_dout(sim_data_stream_V_dout),
    .sim_data_stream_V_empty_n(sim_data_stream_V_empty_n),
    .sim_data_stream_V_read(normalized_Loop_loop_U0_sim_data_stream_V_read),
    .nor_data_stream_V_din(normalized_Loop_loop_U0_nor_data_stream_V_din),
    .nor_data_stream_V_full_n(nor_data_stream_V_full_n),
    .nor_data_stream_V_write(normalized_Loop_loop_U0_nor_data_stream_V_write),
    .gray_data_stream_V_din(normalized_Loop_loop_U0_gray_data_stream_V_din),
    .gray_data_stream_V_full_n(gray_data_stream_V_full_n),
    .gray_data_stream_V_write(normalized_Loop_loop_U0_gray_data_stream_V_write)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((internal_ap_ready == 1'b0) & (real_start == 1'b1))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (start_full_n == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((start_once_reg == 1'b0) & (real_start == 1'b1))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

assign ap_done = normalized_Loop_loop_U0_ap_done;

assign ap_idle = normalized_Loop_loop_U0_ap_idle;

assign ap_ready = internal_ap_ready;

assign ap_sync_continue = ap_continue;

assign ap_sync_done = normalized_Loop_loop_U0_ap_done;

assign ap_sync_ready = normalized_Loop_loop_U0_ap_ready;

assign gray_data_stream_V_din = normalized_Loop_loop_U0_gray_data_stream_V_din;

assign gray_data_stream_V_write = normalized_Loop_loop_U0_gray_data_stream_V_write;

assign internal_ap_ready = ap_sync_ready;

assign max_read = normalized_Loop_loop_U0_max_read;

assign min_read = normalized_Loop_loop_U0_min_read;

assign nor_data_stream_V_din = normalized_Loop_loop_U0_nor_data_stream_V_din;

assign nor_data_stream_V_write = normalized_Loop_loop_U0_nor_data_stream_V_write;

assign normalized_Loop_loop_U0_ap_continue = ap_continue;

assign normalized_Loop_loop_U0_ap_start = real_start;

assign normalized_Loop_loop_U0_start_full_n = 1'b1;

assign normalized_Loop_loop_U0_start_write = 1'b0;

assign sim_data_stream_V_read = normalized_Loop_loop_U0_sim_data_stream_V_read;

assign start_out = real_start;

endmodule //normalized
