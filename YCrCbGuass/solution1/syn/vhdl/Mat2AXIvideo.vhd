-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Mat2AXIvideo is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0);
    nor_mat_data_stream_s_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    nor_mat_data_stream_s_empty_n : IN STD_LOGIC;
    nor_mat_data_stream_s_read : OUT STD_LOGIC;
    nor_output_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    nor_output_TVALID : OUT STD_LOGIC;
    nor_output_TREADY : IN STD_LOGIC;
    nor_output_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    nor_output_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    nor_output_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    nor_output_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    nor_output_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    nor_output_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Mat2AXIvideo is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal nor_output_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal nor_output_V_data_V_1_vld_in : STD_LOGIC;
    signal nor_output_V_data_V_1_vld_out : STD_LOGIC;
    signal nor_output_V_data_V_1_ack_in : STD_LOGIC;
    signal nor_output_V_data_V_1_ack_out : STD_LOGIC;
    signal nor_output_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal nor_output_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal nor_output_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal nor_output_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal nor_output_V_data_V_1_sel : STD_LOGIC;
    signal nor_output_V_data_V_1_load_A : STD_LOGIC;
    signal nor_output_V_data_V_1_load_B : STD_LOGIC;
    signal nor_output_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal nor_output_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal nor_output_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal nor_output_V_keep_V_1_vld_in : STD_LOGIC;
    signal nor_output_V_keep_V_1_vld_out : STD_LOGIC;
    signal nor_output_V_keep_V_1_ack_in : STD_LOGIC;
    signal nor_output_V_keep_V_1_ack_out : STD_LOGIC;
    signal nor_output_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal nor_output_V_keep_V_1_sel : STD_LOGIC;
    signal nor_output_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal nor_output_V_strb_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal nor_output_V_strb_V_1_vld_in : STD_LOGIC;
    signal nor_output_V_strb_V_1_vld_out : STD_LOGIC;
    signal nor_output_V_strb_V_1_ack_in : STD_LOGIC;
    signal nor_output_V_strb_V_1_ack_out : STD_LOGIC;
    signal nor_output_V_strb_V_1_sel_rd : STD_LOGIC := '0';
    signal nor_output_V_strb_V_1_sel : STD_LOGIC;
    signal nor_output_V_strb_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal nor_output_V_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal nor_output_V_user_V_1_vld_in : STD_LOGIC;
    signal nor_output_V_user_V_1_vld_out : STD_LOGIC;
    signal nor_output_V_user_V_1_ack_in : STD_LOGIC;
    signal nor_output_V_user_V_1_ack_out : STD_LOGIC;
    signal nor_output_V_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal nor_output_V_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal nor_output_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal nor_output_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal nor_output_V_user_V_1_sel : STD_LOGIC;
    signal nor_output_V_user_V_1_load_A : STD_LOGIC;
    signal nor_output_V_user_V_1_load_B : STD_LOGIC;
    signal nor_output_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal nor_output_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal nor_output_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal nor_output_V_last_V_1_vld_in : STD_LOGIC;
    signal nor_output_V_last_V_1_vld_out : STD_LOGIC;
    signal nor_output_V_last_V_1_ack_in : STD_LOGIC;
    signal nor_output_V_last_V_1_ack_out : STD_LOGIC;
    signal nor_output_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal nor_output_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal nor_output_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal nor_output_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal nor_output_V_last_V_1_sel : STD_LOGIC;
    signal nor_output_V_last_V_1_load_A : STD_LOGIC;
    signal nor_output_V_last_V_1_load_B : STD_LOGIC;
    signal nor_output_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal nor_output_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal nor_output_V_id_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal nor_output_V_id_V_1_vld_in : STD_LOGIC;
    signal nor_output_V_id_V_1_vld_out : STD_LOGIC;
    signal nor_output_V_id_V_1_ack_in : STD_LOGIC;
    signal nor_output_V_id_V_1_ack_out : STD_LOGIC;
    signal nor_output_V_id_V_1_sel_rd : STD_LOGIC := '0';
    signal nor_output_V_id_V_1_sel : STD_LOGIC;
    signal nor_output_V_id_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal nor_output_V_dest_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal nor_output_V_dest_V_1_vld_in : STD_LOGIC;
    signal nor_output_V_dest_V_1_vld_out : STD_LOGIC;
    signal nor_output_V_dest_V_1_ack_in : STD_LOGIC;
    signal nor_output_V_dest_V_1_ack_out : STD_LOGIC;
    signal nor_output_V_dest_V_1_sel_rd : STD_LOGIC := '0';
    signal nor_output_V_dest_V_1_sel : STD_LOGIC;
    signal nor_output_V_dest_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal nor_mat_data_stream_s_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_reg_260 : STD_LOGIC_VECTOR (0 downto 0);
    signal nor_output_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter1_exitcond_i_reg_260 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_13_reg_158 : STD_LOGIC_VECTOR (8 downto 0);
    signal rows_V_fu_169_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal cols_V_fu_173_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_fu_177_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond2_i_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2 : BOOLEAN;
    signal i_V_fu_193_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_reg_255 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_V_fu_204_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal axi_last_V_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_V_reg_269 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_data_V_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal t_V_reg_147 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_user_V_fu_96 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((nor_output_V_data_V_1_ack_in = ap_const_logic_0) or (nor_output_V_dest_V_1_ack_in = ap_const_logic_0) or (nor_output_V_id_V_1_ack_in = ap_const_logic_0) or (nor_output_V_last_V_1_ack_in = ap_const_logic_0) or (nor_output_V_user_V_1_ack_in = ap_const_logic_0) or (nor_output_V_strb_V_1_ack_in = ap_const_logic_0) or (nor_output_V_keep_V_1_ack_in = ap_const_logic_0))) and (exitcond2_i_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((not(((nor_output_V_data_V_1_ack_in = ap_const_logic_0) or (nor_output_V_dest_V_1_ack_in = ap_const_logic_0) or (nor_output_V_id_V_1_ack_in = ap_const_logic_0) or (nor_output_V_last_V_1_ack_in = ap_const_logic_0) or (nor_output_V_user_V_1_ack_in = ap_const_logic_0) or (nor_output_V_strb_V_1_ack_in = ap_const_logic_0) or (nor_output_V_keep_V_1_ack_in = ap_const_logic_0))) and (exitcond2_i_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((not(((nor_output_V_data_V_1_ack_in = ap_const_logic_0) or (nor_output_V_dest_V_1_ack_in = ap_const_logic_0) or (nor_output_V_id_V_1_ack_in = ap_const_logic_0) or (nor_output_V_last_V_1_ack_in = ap_const_logic_0) or (nor_output_V_user_V_1_ack_in = ap_const_logic_0) or (nor_output_V_strb_V_1_ack_in = ap_const_logic_0) or (nor_output_V_keep_V_1_ack_in = ap_const_logic_0))) and (exitcond2_i_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((nor_output_V_data_V_1_ack_out = ap_const_logic_1) and (nor_output_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        nor_output_V_data_V_1_sel_rd <= not(nor_output_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((nor_output_V_data_V_1_ack_in = ap_const_logic_1) and (nor_output_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        nor_output_V_data_V_1_sel_wr <= not(nor_output_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((nor_output_V_data_V_1_state = ap_const_lv2_2) and (nor_output_V_data_V_1_vld_in = ap_const_logic_0)) or ((nor_output_V_data_V_1_state = ap_const_lv2_3) and (nor_output_V_data_V_1_vld_in = ap_const_logic_0) and (nor_output_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    nor_output_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((nor_output_V_data_V_1_state = ap_const_lv2_1) and (nor_output_V_data_V_1_ack_out = ap_const_logic_0)) or ((nor_output_V_data_V_1_state = ap_const_lv2_3) and (nor_output_V_data_V_1_ack_out = ap_const_logic_0) and (nor_output_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((nor_output_V_data_V_1_vld_in = ap_const_logic_0) and (nor_output_V_data_V_1_ack_out = ap_const_logic_1))) and not(((nor_output_V_data_V_1_ack_out = ap_const_logic_0) and (nor_output_V_data_V_1_vld_in = ap_const_logic_1))) and (nor_output_V_data_V_1_state = ap_const_lv2_3)) or ((nor_output_V_data_V_1_state = ap_const_lv2_1) and (nor_output_V_data_V_1_ack_out = ap_const_logic_1)) or ((nor_output_V_data_V_1_state = ap_const_lv2_2) and (nor_output_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    nor_output_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_dest_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_dest_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((nor_output_V_dest_V_1_ack_out = ap_const_logic_1) and (nor_output_V_dest_V_1_vld_out = ap_const_logic_1))) then 
                                        nor_output_V_dest_V_1_sel_rd <= not(nor_output_V_dest_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_dest_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_dest_V_1_state <= ap_const_lv2_0;
            else
                if ((((nor_output_V_dest_V_1_state = ap_const_lv2_2) and (nor_output_V_dest_V_1_vld_in = ap_const_logic_0)) or ((nor_output_V_dest_V_1_state = ap_const_lv2_3) and (nor_output_V_dest_V_1_vld_in = ap_const_logic_0) and (nor_output_V_dest_V_1_ack_out = ap_const_logic_1)))) then 
                    nor_output_V_dest_V_1_state <= ap_const_lv2_2;
                elsif ((((nor_output_V_dest_V_1_state = ap_const_lv2_1) and (nor_output_V_dest_V_1_ack_out = ap_const_logic_0)) or ((nor_output_V_dest_V_1_state = ap_const_lv2_3) and (nor_output_V_dest_V_1_ack_out = ap_const_logic_0) and (nor_output_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_dest_V_1_state <= ap_const_lv2_1;
                elsif (((not(((nor_output_V_dest_V_1_vld_in = ap_const_logic_0) and (nor_output_V_dest_V_1_ack_out = ap_const_logic_1))) and not(((nor_output_V_dest_V_1_ack_out = ap_const_logic_0) and (nor_output_V_dest_V_1_vld_in = ap_const_logic_1))) and (nor_output_V_dest_V_1_state = ap_const_lv2_3)) or ((nor_output_V_dest_V_1_state = ap_const_lv2_1) and (nor_output_V_dest_V_1_ack_out = ap_const_logic_1)) or ((nor_output_V_dest_V_1_state = ap_const_lv2_2) and (nor_output_V_dest_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_dest_V_1_state <= ap_const_lv2_3;
                else 
                    nor_output_V_dest_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_id_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_id_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((nor_output_V_id_V_1_ack_out = ap_const_logic_1) and (nor_output_V_id_V_1_vld_out = ap_const_logic_1))) then 
                                        nor_output_V_id_V_1_sel_rd <= not(nor_output_V_id_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_id_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_id_V_1_state <= ap_const_lv2_0;
            else
                if ((((nor_output_V_id_V_1_state = ap_const_lv2_2) and (nor_output_V_id_V_1_vld_in = ap_const_logic_0)) or ((nor_output_V_id_V_1_state = ap_const_lv2_3) and (nor_output_V_id_V_1_vld_in = ap_const_logic_0) and (nor_output_V_id_V_1_ack_out = ap_const_logic_1)))) then 
                    nor_output_V_id_V_1_state <= ap_const_lv2_2;
                elsif ((((nor_output_V_id_V_1_state = ap_const_lv2_1) and (nor_output_V_id_V_1_ack_out = ap_const_logic_0)) or ((nor_output_V_id_V_1_state = ap_const_lv2_3) and (nor_output_V_id_V_1_ack_out = ap_const_logic_0) and (nor_output_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_id_V_1_state <= ap_const_lv2_1;
                elsif (((not(((nor_output_V_id_V_1_vld_in = ap_const_logic_0) and (nor_output_V_id_V_1_ack_out = ap_const_logic_1))) and not(((nor_output_V_id_V_1_ack_out = ap_const_logic_0) and (nor_output_V_id_V_1_vld_in = ap_const_logic_1))) and (nor_output_V_id_V_1_state = ap_const_lv2_3)) or ((nor_output_V_id_V_1_state = ap_const_lv2_1) and (nor_output_V_id_V_1_ack_out = ap_const_logic_1)) or ((nor_output_V_id_V_1_state = ap_const_lv2_2) and (nor_output_V_id_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_id_V_1_state <= ap_const_lv2_3;
                else 
                    nor_output_V_id_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((nor_output_V_keep_V_1_ack_out = ap_const_logic_1) and (nor_output_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        nor_output_V_keep_V_1_sel_rd <= not(nor_output_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((nor_output_V_keep_V_1_state = ap_const_lv2_2) and (nor_output_V_keep_V_1_vld_in = ap_const_logic_0)) or ((nor_output_V_keep_V_1_state = ap_const_lv2_3) and (nor_output_V_keep_V_1_vld_in = ap_const_logic_0) and (nor_output_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    nor_output_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((nor_output_V_keep_V_1_state = ap_const_lv2_1) and (nor_output_V_keep_V_1_ack_out = ap_const_logic_0)) or ((nor_output_V_keep_V_1_state = ap_const_lv2_3) and (nor_output_V_keep_V_1_ack_out = ap_const_logic_0) and (nor_output_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((nor_output_V_keep_V_1_vld_in = ap_const_logic_0) and (nor_output_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((nor_output_V_keep_V_1_ack_out = ap_const_logic_0) and (nor_output_V_keep_V_1_vld_in = ap_const_logic_1))) and (nor_output_V_keep_V_1_state = ap_const_lv2_3)) or ((nor_output_V_keep_V_1_state = ap_const_lv2_1) and (nor_output_V_keep_V_1_ack_out = ap_const_logic_1)) or ((nor_output_V_keep_V_1_state = ap_const_lv2_2) and (nor_output_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    nor_output_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((nor_output_V_last_V_1_ack_out = ap_const_logic_1) and (nor_output_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        nor_output_V_last_V_1_sel_rd <= not(nor_output_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((nor_output_V_last_V_1_ack_in = ap_const_logic_1) and (nor_output_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        nor_output_V_last_V_1_sel_wr <= not(nor_output_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((nor_output_V_last_V_1_state = ap_const_lv2_2) and (nor_output_V_last_V_1_vld_in = ap_const_logic_0)) or ((nor_output_V_last_V_1_state = ap_const_lv2_3) and (nor_output_V_last_V_1_vld_in = ap_const_logic_0) and (nor_output_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    nor_output_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((nor_output_V_last_V_1_state = ap_const_lv2_1) and (nor_output_V_last_V_1_ack_out = ap_const_logic_0)) or ((nor_output_V_last_V_1_state = ap_const_lv2_3) and (nor_output_V_last_V_1_ack_out = ap_const_logic_0) and (nor_output_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((nor_output_V_last_V_1_vld_in = ap_const_logic_0) and (nor_output_V_last_V_1_ack_out = ap_const_logic_1))) and not(((nor_output_V_last_V_1_ack_out = ap_const_logic_0) and (nor_output_V_last_V_1_vld_in = ap_const_logic_1))) and (nor_output_V_last_V_1_state = ap_const_lv2_3)) or ((nor_output_V_last_V_1_state = ap_const_lv2_1) and (nor_output_V_last_V_1_ack_out = ap_const_logic_1)) or ((nor_output_V_last_V_1_state = ap_const_lv2_2) and (nor_output_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    nor_output_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_strb_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_strb_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((nor_output_V_strb_V_1_ack_out = ap_const_logic_1) and (nor_output_V_strb_V_1_vld_out = ap_const_logic_1))) then 
                                        nor_output_V_strb_V_1_sel_rd <= not(nor_output_V_strb_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_strb_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_strb_V_1_state <= ap_const_lv2_0;
            else
                if ((((nor_output_V_strb_V_1_state = ap_const_lv2_2) and (nor_output_V_strb_V_1_vld_in = ap_const_logic_0)) or ((nor_output_V_strb_V_1_state = ap_const_lv2_3) and (nor_output_V_strb_V_1_vld_in = ap_const_logic_0) and (nor_output_V_strb_V_1_ack_out = ap_const_logic_1)))) then 
                    nor_output_V_strb_V_1_state <= ap_const_lv2_2;
                elsif ((((nor_output_V_strb_V_1_state = ap_const_lv2_1) and (nor_output_V_strb_V_1_ack_out = ap_const_logic_0)) or ((nor_output_V_strb_V_1_state = ap_const_lv2_3) and (nor_output_V_strb_V_1_ack_out = ap_const_logic_0) and (nor_output_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_strb_V_1_state <= ap_const_lv2_1;
                elsif (((not(((nor_output_V_strb_V_1_vld_in = ap_const_logic_0) and (nor_output_V_strb_V_1_ack_out = ap_const_logic_1))) and not(((nor_output_V_strb_V_1_ack_out = ap_const_logic_0) and (nor_output_V_strb_V_1_vld_in = ap_const_logic_1))) and (nor_output_V_strb_V_1_state = ap_const_lv2_3)) or ((nor_output_V_strb_V_1_state = ap_const_lv2_1) and (nor_output_V_strb_V_1_ack_out = ap_const_logic_1)) or ((nor_output_V_strb_V_1_state = ap_const_lv2_2) and (nor_output_V_strb_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_strb_V_1_state <= ap_const_lv2_3;
                else 
                    nor_output_V_strb_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((nor_output_V_user_V_1_ack_out = ap_const_logic_1) and (nor_output_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        nor_output_V_user_V_1_sel_rd <= not(nor_output_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((nor_output_V_user_V_1_ack_in = ap_const_logic_1) and (nor_output_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        nor_output_V_user_V_1_sel_wr <= not(nor_output_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    nor_output_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                nor_output_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((nor_output_V_user_V_1_state = ap_const_lv2_2) and (nor_output_V_user_V_1_vld_in = ap_const_logic_0)) or ((nor_output_V_user_V_1_state = ap_const_lv2_3) and (nor_output_V_user_V_1_vld_in = ap_const_logic_0) and (nor_output_V_user_V_1_ack_out = ap_const_logic_1)))) then 
                    nor_output_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((nor_output_V_user_V_1_state = ap_const_lv2_1) and (nor_output_V_user_V_1_ack_out = ap_const_logic_0)) or ((nor_output_V_user_V_1_state = ap_const_lv2_3) and (nor_output_V_user_V_1_ack_out = ap_const_logic_0) and (nor_output_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((nor_output_V_user_V_1_vld_in = ap_const_logic_0) and (nor_output_V_user_V_1_ack_out = ap_const_logic_1))) and not(((nor_output_V_user_V_1_ack_out = ap_const_logic_0) and (nor_output_V_user_V_1_vld_in = ap_const_logic_1))) and (nor_output_V_user_V_1_state = ap_const_lv2_3)) or ((nor_output_V_user_V_1_state = ap_const_lv2_1) and (nor_output_V_user_V_1_ack_out = ap_const_logic_1)) or ((nor_output_V_user_V_1_state = ap_const_lv2_2) and (nor_output_V_user_V_1_vld_in = ap_const_logic_1)))) then 
                    nor_output_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    nor_output_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    t_V_13_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_199_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_V_13_reg_158 <= j_V_fu_204_p2;
            elsif ((not(((nor_output_V_data_V_1_ack_in = ap_const_logic_0) or (nor_output_V_dest_V_1_ack_in = ap_const_logic_0) or (nor_output_V_id_V_1_ack_in = ap_const_logic_0) or (nor_output_V_last_V_1_ack_in = ap_const_logic_0) or (nor_output_V_user_V_1_ack_in = ap_const_logic_0) or (nor_output_V_strb_V_1_ack_in = ap_const_logic_0) or (nor_output_V_keep_V_1_ack_in = ap_const_logic_0))) and (exitcond2_i_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_13_reg_158 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    t_V_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_reg_147 <= i_V_reg_255;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_147 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    tmp_user_V_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_reg_260 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                tmp_user_V_fu_96 <= ap_const_lv1_0;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                tmp_user_V_fu_96 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_i_reg_260 <= exitcond_i_reg_260;
                exitcond_i_reg_260 <= exitcond_i_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_i_fu_199_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                axi_last_V_reg_269 <= axi_last_V_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((nor_output_V_data_V_1_ack_in = ap_const_logic_0) or (nor_output_V_dest_V_1_ack_in = ap_const_logic_0) or (nor_output_V_id_V_1_ack_in = ap_const_logic_0) or (nor_output_V_last_V_1_ack_in = ap_const_logic_0) or (nor_output_V_user_V_1_ack_in = ap_const_logic_0) or (nor_output_V_strb_V_1_ack_in = ap_const_logic_0) or (nor_output_V_keep_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_V_reg_255 <= i_V_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((nor_output_V_data_V_1_load_A = ap_const_logic_1)) then
                nor_output_V_data_V_1_payload_A <= tmp_data_V_fu_219_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((nor_output_V_data_V_1_load_B = ap_const_logic_1)) then
                nor_output_V_data_V_1_payload_B <= tmp_data_V_fu_219_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((nor_output_V_last_V_1_load_A = ap_const_logic_1)) then
                nor_output_V_last_V_1_payload_A <= axi_last_V_reg_269;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((nor_output_V_last_V_1_load_B = ap_const_logic_1)) then
                nor_output_V_last_V_1_payload_B <= axi_last_V_reg_269;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((nor_output_V_user_V_1_load_A = ap_const_logic_1)) then
                nor_output_V_user_V_1_payload_A <= tmp_user_V_fu_96;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((nor_output_V_user_V_1_load_B = ap_const_logic_1)) then
                nor_output_V_user_V_1_payload_B <= tmp_user_V_fu_96;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, nor_output_V_data_V_1_ack_in, nor_output_V_keep_V_1_ack_in, nor_output_V_strb_V_1_ack_in, nor_output_V_user_V_1_ack_in, nor_output_V_last_V_1_ack_in, nor_output_V_id_V_1_ack_in, nor_output_V_dest_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, exitcond2_i_fu_188_p2, ap_CS_fsm_state2, exitcond_i_fu_199_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((nor_output_V_data_V_1_ack_in = ap_const_logic_0) or (nor_output_V_dest_V_1_ack_in = ap_const_logic_0) or (nor_output_V_id_V_1_ack_in = ap_const_logic_0) or (nor_output_V_last_V_1_ack_in = ap_const_logic_0) or (nor_output_V_user_V_1_ack_in = ap_const_logic_0) or (nor_output_V_strb_V_1_ack_in = ap_const_logic_0) or (nor_output_V_keep_V_1_ack_in = ap_const_logic_0))) and (exitcond2_i_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((nor_output_V_data_V_1_ack_in = ap_const_logic_0) or (nor_output_V_dest_V_1_ack_in = ap_const_logic_0) or (nor_output_V_id_V_1_ack_in = ap_const_logic_0) or (nor_output_V_last_V_1_ack_in = ap_const_logic_0) or (nor_output_V_user_V_1_ack_in = ap_const_logic_0) or (nor_output_V_strb_V_1_ack_in = ap_const_logic_0) or (nor_output_V_keep_V_1_ack_in = ap_const_logic_0))) and (exitcond2_i_fu_188_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_i_fu_199_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((exitcond_i_fu_199_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(nor_mat_data_stream_s_empty_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_260)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond_i_reg_260 = ap_const_lv1_0) and (nor_mat_data_stream_s_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(nor_mat_data_stream_s_empty_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_260, ap_enable_reg_pp0_iter2, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((exitcond_i_reg_260 = ap_const_lv1_0) and (nor_mat_data_stream_s_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(nor_mat_data_stream_s_empty_n, ap_enable_reg_pp0_iter1, exitcond_i_reg_260, ap_enable_reg_pp0_iter2, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state4_io) or ((exitcond_i_reg_260 = ap_const_lv1_0) and (nor_mat_data_stream_s_empty_n = ap_const_logic_0)))));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(nor_output_V_data_V_1_ack_in, nor_output_V_keep_V_1_ack_in, nor_output_V_strb_V_1_ack_in, nor_output_V_user_V_1_ack_in, nor_output_V_last_V_1_ack_in, nor_output_V_id_V_1_ack_in, nor_output_V_dest_V_1_ack_in)
    begin
                ap_block_state2 <= ((nor_output_V_data_V_1_ack_in = ap_const_logic_0) or (nor_output_V_dest_V_1_ack_in = ap_const_logic_0) or (nor_output_V_id_V_1_ack_in = ap_const_logic_0) or (nor_output_V_last_V_1_ack_in = ap_const_logic_0) or (nor_output_V_user_V_1_ack_in = ap_const_logic_0) or (nor_output_V_strb_V_1_ack_in = ap_const_logic_0) or (nor_output_V_keep_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(nor_output_V_data_V_1_ack_in, exitcond_i_reg_260)
    begin
                ap_block_state4_io <= ((exitcond_i_reg_260 = ap_const_lv1_0) and (nor_output_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state4_pp0_stage0_iter1_assign_proc : process(nor_mat_data_stream_s_empty_n, exitcond_i_reg_260)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((exitcond_i_reg_260 = ap_const_lv1_0) and (nor_mat_data_stream_s_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_io_assign_proc : process(nor_output_V_data_V_1_ack_in, ap_reg_pp0_iter1_exitcond_i_reg_260)
    begin
                ap_block_state5_io <= ((ap_reg_pp0_iter1_exitcond_i_reg_260 = ap_const_lv1_0) and (nor_output_V_data_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_i_fu_199_p2)
    begin
        if ((exitcond_i_fu_199_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, nor_output_V_data_V_1_ack_in, nor_output_V_keep_V_1_ack_in, nor_output_V_strb_V_1_ack_in, nor_output_V_user_V_1_ack_in, nor_output_V_last_V_1_ack_in, nor_output_V_id_V_1_ack_in, nor_output_V_dest_V_1_ack_in, exitcond2_i_fu_188_p2, ap_CS_fsm_state2)
    begin
        if ((not(((nor_output_V_data_V_1_ack_in = ap_const_logic_0) or (nor_output_V_dest_V_1_ack_in = ap_const_logic_0) or (nor_output_V_id_V_1_ack_in = ap_const_logic_0) or (nor_output_V_last_V_1_ack_in = ap_const_logic_0) or (nor_output_V_user_V_1_ack_in = ap_const_logic_0) or (nor_output_V_strb_V_1_ack_in = ap_const_logic_0) or (nor_output_V_keep_V_1_ack_in = ap_const_logic_0))) and (exitcond2_i_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(nor_output_V_data_V_1_ack_in, nor_output_V_keep_V_1_ack_in, nor_output_V_strb_V_1_ack_in, nor_output_V_user_V_1_ack_in, nor_output_V_last_V_1_ack_in, nor_output_V_id_V_1_ack_in, nor_output_V_dest_V_1_ack_in, exitcond2_i_fu_188_p2, ap_CS_fsm_state2)
    begin
        if ((not(((nor_output_V_data_V_1_ack_in = ap_const_logic_0) or (nor_output_V_dest_V_1_ack_in = ap_const_logic_0) or (nor_output_V_id_V_1_ack_in = ap_const_logic_0) or (nor_output_V_last_V_1_ack_in = ap_const_logic_0) or (nor_output_V_user_V_1_ack_in = ap_const_logic_0) or (nor_output_V_strb_V_1_ack_in = ap_const_logic_0) or (nor_output_V_keep_V_1_ack_in = ap_const_logic_0))) and (exitcond2_i_fu_188_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    axi_last_V_fu_210_p2 <= "1" when (t_V_13_reg_158 = r_V_fu_177_p2) else "0";
    cols_V_fu_173_p1 <= cols(9 - 1 downto 0);
    exitcond2_i_fu_188_p2 <= "1" when (t_V_reg_147 = rows_V_fu_169_p1) else "0";
    exitcond_i_fu_199_p2 <= "1" when (t_V_13_reg_158 = cols_V_fu_173_p1) else "0";
    i_V_fu_193_p2 <= std_logic_vector(unsigned(t_V_reg_147) + unsigned(ap_const_lv10_1));
    j_V_fu_204_p2 <= std_logic_vector(unsigned(t_V_13_reg_158) + unsigned(ap_const_lv9_1));

    nor_mat_data_stream_s_blk_n_assign_proc : process(nor_mat_data_stream_s_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_260)
    begin
        if (((exitcond_i_reg_260 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nor_mat_data_stream_s_blk_n <= nor_mat_data_stream_s_empty_n;
        else 
            nor_mat_data_stream_s_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    nor_mat_data_stream_s_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_260, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_260 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nor_mat_data_stream_s_read <= ap_const_logic_1;
        else 
            nor_mat_data_stream_s_read <= ap_const_logic_0;
        end if; 
    end process;

    nor_output_TDATA <= nor_output_V_data_V_1_data_out;

    nor_output_TDATA_blk_n_assign_proc : process(nor_output_V_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_reg_260, ap_enable_reg_pp0_iter2, ap_reg_pp0_iter1_exitcond_i_reg_260)
    begin
        if ((((ap_reg_pp0_iter1_exitcond_i_reg_260 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((exitcond_i_reg_260 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            nor_output_TDATA_blk_n <= nor_output_V_data_V_1_state(1);
        else 
            nor_output_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    nor_output_TDEST <= nor_output_V_dest_V_1_data_out;
    nor_output_TID <= nor_output_V_id_V_1_data_out;
    nor_output_TKEEP <= nor_output_V_keep_V_1_data_out;
    nor_output_TLAST <= nor_output_V_last_V_1_data_out;
    nor_output_TSTRB <= nor_output_V_strb_V_1_data_out;
    nor_output_TUSER <= nor_output_V_user_V_1_data_out;
    nor_output_TVALID <= nor_output_V_dest_V_1_state(0);
    nor_output_V_data_V_1_ack_in <= nor_output_V_data_V_1_state(1);
    nor_output_V_data_V_1_ack_out <= nor_output_TREADY;

    nor_output_V_data_V_1_data_out_assign_proc : process(nor_output_V_data_V_1_payload_A, nor_output_V_data_V_1_payload_B, nor_output_V_data_V_1_sel)
    begin
        if ((nor_output_V_data_V_1_sel = ap_const_logic_1)) then 
            nor_output_V_data_V_1_data_out <= nor_output_V_data_V_1_payload_B;
        else 
            nor_output_V_data_V_1_data_out <= nor_output_V_data_V_1_payload_A;
        end if; 
    end process;

    nor_output_V_data_V_1_load_A <= (nor_output_V_data_V_1_state_cmp_full and not(nor_output_V_data_V_1_sel_wr));
    nor_output_V_data_V_1_load_B <= (nor_output_V_data_V_1_state_cmp_full and nor_output_V_data_V_1_sel_wr);
    nor_output_V_data_V_1_sel <= nor_output_V_data_V_1_sel_rd;
    nor_output_V_data_V_1_state_cmp_full <= '0' when (nor_output_V_data_V_1_state = ap_const_lv2_1) else '1';

    nor_output_V_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_260, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_260 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nor_output_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            nor_output_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    nor_output_V_data_V_1_vld_out <= nor_output_V_data_V_1_state(0);
    nor_output_V_dest_V_1_ack_in <= nor_output_V_dest_V_1_state(1);
    nor_output_V_dest_V_1_ack_out <= nor_output_TREADY;
    nor_output_V_dest_V_1_data_out <= ap_const_lv1_0;
    nor_output_V_dest_V_1_sel <= nor_output_V_dest_V_1_sel_rd;

    nor_output_V_dest_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_260, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_260 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nor_output_V_dest_V_1_vld_in <= ap_const_logic_1;
        else 
            nor_output_V_dest_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    nor_output_V_dest_V_1_vld_out <= nor_output_V_dest_V_1_state(0);
    nor_output_V_id_V_1_ack_in <= nor_output_V_id_V_1_state(1);
    nor_output_V_id_V_1_ack_out <= nor_output_TREADY;
    nor_output_V_id_V_1_data_out <= ap_const_lv1_0;
    nor_output_V_id_V_1_sel <= nor_output_V_id_V_1_sel_rd;

    nor_output_V_id_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_260, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_260 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nor_output_V_id_V_1_vld_in <= ap_const_logic_1;
        else 
            nor_output_V_id_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    nor_output_V_id_V_1_vld_out <= nor_output_V_id_V_1_state(0);
    nor_output_V_keep_V_1_ack_in <= nor_output_V_keep_V_1_state(1);
    nor_output_V_keep_V_1_ack_out <= nor_output_TREADY;
    nor_output_V_keep_V_1_data_out <= ap_const_lv4_F;
    nor_output_V_keep_V_1_sel <= nor_output_V_keep_V_1_sel_rd;

    nor_output_V_keep_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_260, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_260 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nor_output_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            nor_output_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    nor_output_V_keep_V_1_vld_out <= nor_output_V_keep_V_1_state(0);
    nor_output_V_last_V_1_ack_in <= nor_output_V_last_V_1_state(1);
    nor_output_V_last_V_1_ack_out <= nor_output_TREADY;

    nor_output_V_last_V_1_data_out_assign_proc : process(nor_output_V_last_V_1_payload_A, nor_output_V_last_V_1_payload_B, nor_output_V_last_V_1_sel)
    begin
        if ((nor_output_V_last_V_1_sel = ap_const_logic_1)) then 
            nor_output_V_last_V_1_data_out <= nor_output_V_last_V_1_payload_B;
        else 
            nor_output_V_last_V_1_data_out <= nor_output_V_last_V_1_payload_A;
        end if; 
    end process;

    nor_output_V_last_V_1_load_A <= (nor_output_V_last_V_1_state_cmp_full and not(nor_output_V_last_V_1_sel_wr));
    nor_output_V_last_V_1_load_B <= (nor_output_V_last_V_1_state_cmp_full and nor_output_V_last_V_1_sel_wr);
    nor_output_V_last_V_1_sel <= nor_output_V_last_V_1_sel_rd;
    nor_output_V_last_V_1_state_cmp_full <= '0' when (nor_output_V_last_V_1_state = ap_const_lv2_1) else '1';

    nor_output_V_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_260, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_260 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nor_output_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            nor_output_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    nor_output_V_last_V_1_vld_out <= nor_output_V_last_V_1_state(0);
    nor_output_V_strb_V_1_ack_in <= nor_output_V_strb_V_1_state(1);
    nor_output_V_strb_V_1_ack_out <= nor_output_TREADY;
    nor_output_V_strb_V_1_data_out <= ap_const_lv4_0;
    nor_output_V_strb_V_1_sel <= nor_output_V_strb_V_1_sel_rd;

    nor_output_V_strb_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_260, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_260 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nor_output_V_strb_V_1_vld_in <= ap_const_logic_1;
        else 
            nor_output_V_strb_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    nor_output_V_strb_V_1_vld_out <= nor_output_V_strb_V_1_state(0);
    nor_output_V_user_V_1_ack_in <= nor_output_V_user_V_1_state(1);
    nor_output_V_user_V_1_ack_out <= nor_output_TREADY;

    nor_output_V_user_V_1_data_out_assign_proc : process(nor_output_V_user_V_1_payload_A, nor_output_V_user_V_1_payload_B, nor_output_V_user_V_1_sel)
    begin
        if ((nor_output_V_user_V_1_sel = ap_const_logic_1)) then 
            nor_output_V_user_V_1_data_out <= nor_output_V_user_V_1_payload_B;
        else 
            nor_output_V_user_V_1_data_out <= nor_output_V_user_V_1_payload_A;
        end if; 
    end process;

    nor_output_V_user_V_1_load_A <= (nor_output_V_user_V_1_state_cmp_full and not(nor_output_V_user_V_1_sel_wr));
    nor_output_V_user_V_1_load_B <= (nor_output_V_user_V_1_state_cmp_full and nor_output_V_user_V_1_sel_wr);
    nor_output_V_user_V_1_sel <= nor_output_V_user_V_1_sel_rd;
    nor_output_V_user_V_1_state_cmp_full <= '0' when (nor_output_V_user_V_1_state = ap_const_lv2_1) else '1';

    nor_output_V_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_reg_260, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_i_reg_260 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            nor_output_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            nor_output_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    nor_output_V_user_V_1_vld_out <= nor_output_V_user_V_1_state(0);
    r_V_fu_177_p2 <= std_logic_vector(signed(ap_const_lv9_1FF) + signed(cols_V_fu_173_p1));
    rows_V_fu_169_p1 <= rows(10 - 1 downto 0);
    tmp_data_V_fu_219_p1 <= nor_mat_data_stream_s_dout;
end behav;
