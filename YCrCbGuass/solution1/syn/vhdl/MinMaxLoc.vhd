-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MinMaxLoc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    src_data_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    src_data_stream_V_empty_n : IN STD_LOGIC;
    src_data_stream_V_read : OUT STD_LOGIC;
    min_val_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    min_val_out_full_n : IN STD_LOGIC;
    min_val_out_write : OUT STD_LOGIC;
    max_val_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
    max_val_out_full_n : IN STD_LOGIC;
    max_val_out_write : OUT STD_LOGIC );
end;


architecture behav of MinMaxLoc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_CF000000 : STD_LOGIC_VECTOR (31 downto 0) := "11001111000000000000000000000000";
    constant ap_const_lv32_4F000000 : STD_LOGIC_VECTOR (31 downto 0) := "01001111000000000000000000000000";
    constant ap_const_lv10_2D0 : STD_LOGIC_VECTOR (9 downto 0) := "1011010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_1E0 : STD_LOGIC_VECTOR (8 downto 0) := "111100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal src_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_i_i_reg_362 : STD_LOGIC_VECTOR (0 downto 0);
    signal min_val_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal max_val_out_blk_n : STD_LOGIC;
    signal t_V_10_reg_109 : STD_LOGIC_VECTOR (8 downto 0);
    signal exitcond139_i_i_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_V_fu_150_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_V_reg_347 : STD_LOGIC_VECTOR (9 downto 0);
    signal min_val_dc_fu_120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal min_val_dc_reg_352 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_val_dc_fu_123_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal max_val_dc_reg_357 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_i_fu_156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_i_i_reg_362 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_V_fu_162_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_43_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal t_V_reg_98 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state7 : BOOLEAN;
    signal v_assign_1_fu_70 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_max_val_4_i_i_fu_311_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal v_assign_fu_74 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_min_val_4_i_i_fu_259_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_5_fu_168_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_9_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal t_V_8_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_2_fu_172_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_195_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_209_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_41_fu_221_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_9_fu_213_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_10_fu_225_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_38_i_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_41_i_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_demorgan_i_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_val_0_i_f_assign_s_fu_239_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_val_0_i_f_assign_1_fu_252_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_7_fu_184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_42_fu_273_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_11_fu_277_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_44_i_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_47_i_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge35_demorgan_i_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_val_0_i_f_assign_2_fu_291_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal s_val_0_i_f_assign_3_fu_304_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component ImgProcess_Top_fpkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    ImgProcess_Top_fpkbM_U69 : component ImgProcess_Top_fpkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => v_assign_fu_74,
        dout => min_val_dc_fu_120_p1);

    ImgProcess_Top_fpkbM_U70 : component ImgProcess_Top_fpkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => v_assign_1_fu_70,
        dout => max_val_dc_fu_123_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((max_val_out_full_n = ap_const_logic_0) or (min_val_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((exitcond139_i_i_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((exitcond139_i_i_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    t_V_10_reg_109_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_i_i_fu_156_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                t_V_10_reg_109 <= j_V_fu_162_p2;
            elsif (((exitcond139_i_i_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                t_V_10_reg_109 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    t_V_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_reg_98 <= i_V_reg_347;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                t_V_reg_98 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    v_assign_1_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_exitcond_i_i_reg_362 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                v_assign_1_fu_70 <= p_max_val_4_i_i_fu_311_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v_assign_1_fu_70 <= ap_const_lv32_CF000000;
            end if; 
        end if;
    end process;

    v_assign_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_reg_pp0_iter1_exitcond_i_i_reg_362 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                v_assign_fu_74 <= p_min_val_4_i_i_fu_259_p3;
            elsif ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                v_assign_fu_74 <= ap_const_lv32_4F000000;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_reg_pp0_iter1_exitcond_i_i_reg_362 <= exitcond_i_i_reg_362;
                exitcond_i_i_reg_362 <= exitcond_i_i_fu_156_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_V_reg_347 <= i_V_fu_150_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond139_i_i_fu_144_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                max_val_dc_reg_357 <= max_val_dc_fu_123_p1;
                min_val_dc_reg_352 <= min_val_dc_fu_120_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_i_i_reg_362 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_43_reg_371 <= src_data_stream_V_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, min_val_out_full_n, max_val_out_full_n, ap_enable_reg_pp0_iter1, ap_CS_fsm_state7, exitcond139_i_i_fu_144_p2, ap_CS_fsm_state2, exitcond_i_i_fu_156_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond139_i_i_fu_144_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_i_i_fu_156_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((exitcond_i_i_fu_156_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state7 => 
                if ((not(((max_val_out_full_n = ap_const_logic_0) or (min_val_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_i_i_reg_362)
    begin
                ap_block_pp0_stage0_11001 <= ((exitcond_i_i_reg_362 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(src_data_stream_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_i_i_reg_362)
    begin
                ap_block_pp0_stage0_subdone <= ((exitcond_i_i_reg_362 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage0_iter1_assign_proc : process(src_data_stream_V_empty_n, exitcond_i_i_reg_362)
    begin
                ap_block_state4_pp0_stage0_iter1 <= ((exitcond_i_i_reg_362 = ap_const_lv1_0) and (src_data_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state7_assign_proc : process(min_val_out_full_n, max_val_out_full_n)
    begin
                ap_block_state7 <= ((max_val_out_full_n = ap_const_logic_0) or (min_val_out_full_n = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_i_i_fu_156_p2)
    begin
        if ((exitcond_i_i_fu_156_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, min_val_out_full_n, max_val_out_full_n, ap_CS_fsm_state7)
    begin
        if ((not(((max_val_out_full_n = ap_const_logic_0) or (min_val_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(min_val_out_full_n, max_val_out_full_n, ap_CS_fsm_state7)
    begin
        if ((not(((max_val_out_full_n = ap_const_logic_0) or (min_val_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    brmerge35_demorgan_i_fu_267_p2 <= (p_Result_s_fu_195_p3 and p_Result_7_fu_184_p3);
    brmerge_demorgan_i_fu_203_p2 <= (p_Result_s_fu_195_p3 and p_Result_2_fu_172_p3);
    exitcond139_i_i_fu_144_p2 <= "1" when (t_V_reg_98 = ap_const_lv10_2D0) else "0";
    exitcond_i_i_fu_156_p2 <= "1" when (t_V_10_reg_109 = ap_const_lv9_1E0) else "0";
    i_V_fu_150_p2 <= std_logic_vector(unsigned(t_V_reg_98) + unsigned(ap_const_lv10_1));
    j_V_fu_162_p2 <= std_logic_vector(unsigned(t_V_10_reg_109) + unsigned(ap_const_lv9_1));

    max_val_out_blk_n_assign_proc : process(max_val_out_full_n, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_val_out_blk_n <= max_val_out_full_n;
        else 
            max_val_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    max_val_out_din <= max_val_dc_reg_357;

    max_val_out_write_assign_proc : process(min_val_out_full_n, max_val_out_full_n, ap_CS_fsm_state7)
    begin
        if ((not(((max_val_out_full_n = ap_const_logic_0) or (min_val_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            max_val_out_write <= ap_const_logic_1;
        else 
            max_val_out_write <= ap_const_logic_0;
        end if; 
    end process;


    min_val_out_blk_n_assign_proc : process(min_val_out_full_n, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            min_val_out_blk_n <= min_val_out_full_n;
        else 
            min_val_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    min_val_out_din <= min_val_dc_reg_352;

    min_val_out_write_assign_proc : process(min_val_out_full_n, max_val_out_full_n, ap_CS_fsm_state7)
    begin
        if ((not(((max_val_out_full_n = ap_const_logic_0) or (min_val_out_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            min_val_out_write <= ap_const_logic_1;
        else 
            min_val_out_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_fu_225_p3 <= (ap_const_lv1_1 & tmp_41_fu_221_p1);
    p_Result_11_fu_277_p3 <= (ap_const_lv1_1 & tmp_42_fu_273_p1);
    p_Result_2_fu_172_p3 <= t_V_5_fu_168_p1(31 downto 31);
    p_Result_7_fu_184_p3 <= t_V_9_fu_180_p1(31 downto 31);
    p_Result_9_fu_213_p3 <= (ap_const_lv1_1 & tmp_fu_209_p1);
    p_Result_s_fu_195_p3 <= t_V_8_fu_192_p1(31 downto 31);
    p_max_val_4_i_i_fu_311_p3 <= 
        s_val_0_i_f_assign_2_fu_291_p3 when (brmerge35_demorgan_i_fu_267_p2(0) = '1') else 
        s_val_0_i_f_assign_3_fu_304_p3;
    p_min_val_4_i_i_fu_259_p3 <= 
        s_val_0_i_f_assign_s_fu_239_p3 when (brmerge_demorgan_i_fu_203_p2(0) = '1') else 
        s_val_0_i_f_assign_1_fu_252_p3;
    s_val_0_i_f_assign_1_fu_252_p3 <= 
        tmp_43_reg_371 when (tmp_41_i_fu_246_p2(0) = '1') else 
        v_assign_fu_74;
    s_val_0_i_f_assign_2_fu_291_p3 <= 
        tmp_43_reg_371 when (tmp_44_i_fu_285_p2(0) = '1') else 
        v_assign_1_fu_70;
    s_val_0_i_f_assign_3_fu_304_p3 <= 
        tmp_43_reg_371 when (tmp_47_i_fu_298_p2(0) = '1') else 
        v_assign_1_fu_70;
    s_val_0_i_f_assign_s_fu_239_p3 <= 
        tmp_43_reg_371 when (tmp_38_i_fu_233_p2(0) = '1') else 
        v_assign_fu_74;

    src_data_stream_V_blk_n_assign_proc : process(src_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_i_i_reg_362)
    begin
        if (((exitcond_i_i_reg_362 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_V_blk_n <= src_data_stream_V_empty_n;
        else 
            src_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    src_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_i_i_reg_362, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_i_i_reg_362 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            src_data_stream_V_read <= ap_const_logic_1;
        else 
            src_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    t_V_5_fu_168_p1 <= v_assign_fu_74;
    t_V_8_fu_192_p1 <= tmp_43_reg_371;
    t_V_9_fu_180_p1 <= v_assign_1_fu_70;
    tmp_38_i_fu_233_p2 <= "1" when (signed(p_Result_9_fu_213_p3) > signed(p_Result_10_fu_225_p3)) else "0";
    tmp_41_fu_221_p1 <= t_V_5_fu_168_p1(31 - 1 downto 0);
    tmp_41_i_fu_246_p2 <= "1" when (signed(t_V_8_fu_192_p1) < signed(t_V_5_fu_168_p1)) else "0";
    tmp_42_fu_273_p1 <= t_V_9_fu_180_p1(31 - 1 downto 0);
    tmp_44_i_fu_285_p2 <= "1" when (signed(p_Result_9_fu_213_p3) < signed(p_Result_11_fu_277_p3)) else "0";
    tmp_47_i_fu_298_p2 <= "1" when (signed(t_V_8_fu_192_p1) > signed(t_V_9_fu_180_p1)) else "0";
    tmp_fu_209_p1 <= t_V_8_fu_192_p1(31 - 1 downto 0);
end behav;
