-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity normalized_Loop_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    max_empty_n : IN STD_LOGIC;
    max_read : OUT STD_LOGIC;
    min_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    min_empty_n : IN STD_LOGIC;
    min_read : OUT STD_LOGIC;
    sim_data_stream_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    sim_data_stream_V_empty_n : IN STD_LOGIC;
    sim_data_stream_V_read : OUT STD_LOGIC;
    nor_data_stream_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    nor_data_stream_V_full_n : IN STD_LOGIC;
    nor_data_stream_V_write : OUT STD_LOGIC;
    gray_data_stream_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
    gray_data_stream_V_full_n : IN STD_LOGIC;
    gray_data_stream_V_write : OUT STD_LOGIC );
end;


architecture behav of normalized_Loop_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv64_406FE00000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001101111111000000000000000000000000000000000000000000000";
    constant ap_const_lv19_54600 : STD_LOGIC_VECTOR (18 downto 0) := "1010100011000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal max_blk_n : STD_LOGIC;
    signal min_blk_n : STD_LOGIC;
    signal sim_data_stream_V_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal nor_data_stream_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_reg_pp0_iter46_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal gray_data_stream_V_blk_n : STD_LOGIC;
    signal indvar_flatten_reg_130 : STD_LOGIC_VECTOR (18 downto 0);
    signal max_read_reg_317 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal min_read_reg_322 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_327 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_flatten_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state51_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state52_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_reg_pp0_iter1_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter2_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter3_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter4_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter5_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter6_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter7_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter8_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter9_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter10_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter11_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter12_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter13_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter14_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter15_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter16_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter17_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter18_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter19_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter20_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter21_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter22_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter23_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter24_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter25_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter26_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter27_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter28_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter29_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter30_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter31_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter32_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter33_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter34_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter35_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter36_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter37_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter38_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter39_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter40_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter41_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter42_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter43_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter44_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_pp0_iter45_exitcond_flatten_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_170_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_i_i_fu_144_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_i_reg_341 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_i_i_reg_346 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_27_i_i_reg_351 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter39_tmp_1_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter40_tmp_1_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter41_tmp_1_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter42_tmp_1_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter43_tmp_1_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter44_tmp_1_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter45_tmp_1_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_reg_pp0_iter46_tmp_1_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_i_i_fu_148_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_i_i_reg_362 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_assign_reg_367 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_reg_372 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_297_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_reg_377 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal grp_fu_151_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal p_Val2_s_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal loc_V_1_fu_197_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_i_i_i_fu_201_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal loc_V_fu_187_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_i_i_i_cast_i_fu_215_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_fu_219_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_59_i_i_i_fu_233_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal isNeg_fu_225_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_i_i_cast_i_fu_239_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_fu_243_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_assign_1_i_i_cast_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_i_i_cast_i_fu_259_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_i_i_cast_i_fu_211_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_60_i_i_i_fu_255_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_61_i_i_i_fu_263_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_19_fu_275_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_i_i_i_fu_269_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_5_fu_283_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_287_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_i_i_i_fu_305_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_151_ce : STD_LOGIC;
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal grp_fu_155_ce : STD_LOGIC;
    signal grp_fu_160_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component ImgProcess_Top_fpfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ImgProcess_Top_fpkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ImgProcess_Top_dslbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ImgProcess_Top_dmhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ImgProcess_Top_ddmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    ImgProcess_Top_fpfYi_U75 : component ImgProcess_Top_fpfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_27_i_i_reg_351,
        dout => tmp_1_fu_141_p1);

    ImgProcess_Top_fpkbM_U76 : component ImgProcess_Top_fpkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => sim_data_stream_V_dout,
        dout => tmp_i_i_fu_144_p1);

    ImgProcess_Top_fpkbM_U77 : component ImgProcess_Top_fpkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => tmp_1_reg_356,
        dout => tmp_29_i_i_fu_148_p1);

    ImgProcess_Top_dslbW_U78 : component ImgProcess_Top_dslbW
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_151_p0,
        din1 => min_read_reg_322,
        ce => grp_fu_151_ce,
        dout => grp_fu_151_p2);

    ImgProcess_Top_dmhbi_U79 : component ImgProcess_Top_dmhbi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_29_i_i_reg_362,
        din1 => ap_const_lv64_406FE00000000000,
        ce => grp_fu_155_ce,
        dout => grp_fu_155_p2);

    ImgProcess_Top_ddmb6_U80 : component ImgProcess_Top_ddmb6
    generic map (
        ID => 1,
        NUM_STAGE => 31,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_26_i_i_reg_346,
        din1 => tmp_i_reg_327,
        ce => grp_fu_160_ce,
        dout => grp_fu_160_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state7)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state7);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_164_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_130 <= indvar_flatten_next_fu_170_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_130 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_reg_pp0_iter10_exitcond_flatten_reg_332 <= ap_reg_pp0_iter9_exitcond_flatten_reg_332;
                ap_reg_pp0_iter11_exitcond_flatten_reg_332 <= ap_reg_pp0_iter10_exitcond_flatten_reg_332;
                ap_reg_pp0_iter12_exitcond_flatten_reg_332 <= ap_reg_pp0_iter11_exitcond_flatten_reg_332;
                ap_reg_pp0_iter13_exitcond_flatten_reg_332 <= ap_reg_pp0_iter12_exitcond_flatten_reg_332;
                ap_reg_pp0_iter14_exitcond_flatten_reg_332 <= ap_reg_pp0_iter13_exitcond_flatten_reg_332;
                ap_reg_pp0_iter15_exitcond_flatten_reg_332 <= ap_reg_pp0_iter14_exitcond_flatten_reg_332;
                ap_reg_pp0_iter16_exitcond_flatten_reg_332 <= ap_reg_pp0_iter15_exitcond_flatten_reg_332;
                ap_reg_pp0_iter17_exitcond_flatten_reg_332 <= ap_reg_pp0_iter16_exitcond_flatten_reg_332;
                ap_reg_pp0_iter18_exitcond_flatten_reg_332 <= ap_reg_pp0_iter17_exitcond_flatten_reg_332;
                ap_reg_pp0_iter19_exitcond_flatten_reg_332 <= ap_reg_pp0_iter18_exitcond_flatten_reg_332;
                ap_reg_pp0_iter20_exitcond_flatten_reg_332 <= ap_reg_pp0_iter19_exitcond_flatten_reg_332;
                ap_reg_pp0_iter21_exitcond_flatten_reg_332 <= ap_reg_pp0_iter20_exitcond_flatten_reg_332;
                ap_reg_pp0_iter22_exitcond_flatten_reg_332 <= ap_reg_pp0_iter21_exitcond_flatten_reg_332;
                ap_reg_pp0_iter23_exitcond_flatten_reg_332 <= ap_reg_pp0_iter22_exitcond_flatten_reg_332;
                ap_reg_pp0_iter24_exitcond_flatten_reg_332 <= ap_reg_pp0_iter23_exitcond_flatten_reg_332;
                ap_reg_pp0_iter25_exitcond_flatten_reg_332 <= ap_reg_pp0_iter24_exitcond_flatten_reg_332;
                ap_reg_pp0_iter26_exitcond_flatten_reg_332 <= ap_reg_pp0_iter25_exitcond_flatten_reg_332;
                ap_reg_pp0_iter27_exitcond_flatten_reg_332 <= ap_reg_pp0_iter26_exitcond_flatten_reg_332;
                ap_reg_pp0_iter28_exitcond_flatten_reg_332 <= ap_reg_pp0_iter27_exitcond_flatten_reg_332;
                ap_reg_pp0_iter29_exitcond_flatten_reg_332 <= ap_reg_pp0_iter28_exitcond_flatten_reg_332;
                ap_reg_pp0_iter2_exitcond_flatten_reg_332 <= ap_reg_pp0_iter1_exitcond_flatten_reg_332;
                ap_reg_pp0_iter30_exitcond_flatten_reg_332 <= ap_reg_pp0_iter29_exitcond_flatten_reg_332;
                ap_reg_pp0_iter31_exitcond_flatten_reg_332 <= ap_reg_pp0_iter30_exitcond_flatten_reg_332;
                ap_reg_pp0_iter32_exitcond_flatten_reg_332 <= ap_reg_pp0_iter31_exitcond_flatten_reg_332;
                ap_reg_pp0_iter33_exitcond_flatten_reg_332 <= ap_reg_pp0_iter32_exitcond_flatten_reg_332;
                ap_reg_pp0_iter34_exitcond_flatten_reg_332 <= ap_reg_pp0_iter33_exitcond_flatten_reg_332;
                ap_reg_pp0_iter35_exitcond_flatten_reg_332 <= ap_reg_pp0_iter34_exitcond_flatten_reg_332;
                ap_reg_pp0_iter36_exitcond_flatten_reg_332 <= ap_reg_pp0_iter35_exitcond_flatten_reg_332;
                ap_reg_pp0_iter37_exitcond_flatten_reg_332 <= ap_reg_pp0_iter36_exitcond_flatten_reg_332;
                ap_reg_pp0_iter38_exitcond_flatten_reg_332 <= ap_reg_pp0_iter37_exitcond_flatten_reg_332;
                ap_reg_pp0_iter39_exitcond_flatten_reg_332 <= ap_reg_pp0_iter38_exitcond_flatten_reg_332;
                ap_reg_pp0_iter39_tmp_1_reg_356 <= tmp_1_reg_356;
                ap_reg_pp0_iter3_exitcond_flatten_reg_332 <= ap_reg_pp0_iter2_exitcond_flatten_reg_332;
                ap_reg_pp0_iter40_exitcond_flatten_reg_332 <= ap_reg_pp0_iter39_exitcond_flatten_reg_332;
                ap_reg_pp0_iter40_tmp_1_reg_356 <= ap_reg_pp0_iter39_tmp_1_reg_356;
                ap_reg_pp0_iter41_exitcond_flatten_reg_332 <= ap_reg_pp0_iter40_exitcond_flatten_reg_332;
                ap_reg_pp0_iter41_tmp_1_reg_356 <= ap_reg_pp0_iter40_tmp_1_reg_356;
                ap_reg_pp0_iter42_exitcond_flatten_reg_332 <= ap_reg_pp0_iter41_exitcond_flatten_reg_332;
                ap_reg_pp0_iter42_tmp_1_reg_356 <= ap_reg_pp0_iter41_tmp_1_reg_356;
                ap_reg_pp0_iter43_exitcond_flatten_reg_332 <= ap_reg_pp0_iter42_exitcond_flatten_reg_332;
                ap_reg_pp0_iter43_tmp_1_reg_356 <= ap_reg_pp0_iter42_tmp_1_reg_356;
                ap_reg_pp0_iter44_exitcond_flatten_reg_332 <= ap_reg_pp0_iter43_exitcond_flatten_reg_332;
                ap_reg_pp0_iter44_tmp_1_reg_356 <= ap_reg_pp0_iter43_tmp_1_reg_356;
                ap_reg_pp0_iter45_exitcond_flatten_reg_332 <= ap_reg_pp0_iter44_exitcond_flatten_reg_332;
                ap_reg_pp0_iter45_tmp_1_reg_356 <= ap_reg_pp0_iter44_tmp_1_reg_356;
                ap_reg_pp0_iter46_exitcond_flatten_reg_332 <= ap_reg_pp0_iter45_exitcond_flatten_reg_332;
                ap_reg_pp0_iter46_tmp_1_reg_356 <= ap_reg_pp0_iter45_tmp_1_reg_356;
                ap_reg_pp0_iter4_exitcond_flatten_reg_332 <= ap_reg_pp0_iter3_exitcond_flatten_reg_332;
                ap_reg_pp0_iter5_exitcond_flatten_reg_332 <= ap_reg_pp0_iter4_exitcond_flatten_reg_332;
                ap_reg_pp0_iter6_exitcond_flatten_reg_332 <= ap_reg_pp0_iter5_exitcond_flatten_reg_332;
                ap_reg_pp0_iter7_exitcond_flatten_reg_332 <= ap_reg_pp0_iter6_exitcond_flatten_reg_332;
                ap_reg_pp0_iter8_exitcond_flatten_reg_332 <= ap_reg_pp0_iter7_exitcond_flatten_reg_332;
                ap_reg_pp0_iter9_exitcond_flatten_reg_332 <= ap_reg_pp0_iter8_exitcond_flatten_reg_332;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_reg_pp0_iter1_exitcond_flatten_reg_332 <= exitcond_flatten_reg_332;
                exitcond_flatten_reg_332 <= exitcond_flatten_fu_164_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((min_empty_n = ap_const_logic_0) or (max_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                max_read_reg_317 <= max_dout;
                min_read_reg_322 <= min_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter45_exitcond_flatten_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                p_Result_s_reg_372 <= p_Val2_s_fu_176_p1(63 downto 63);
                tmp_7_reg_377 <= tmp_7_fu_297_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter37_exitcond_flatten_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_reg_356 <= tmp_1_fu_141_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter5_exitcond_flatten_reg_332 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_26_i_i_reg_346 <= grp_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter36_exitcond_flatten_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_27_i_i_reg_351 <= grp_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter38_exitcond_flatten_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_29_i_i_reg_362 <= tmp_29_i_i_fu_148_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_332 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_i_i_reg_341 <= tmp_i_i_fu_144_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_i_reg_327 <= grp_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_reg_pp0_iter44_exitcond_flatten_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                x_assign_reg_367 <= grp_fu_155_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, max_empty_n, min_empty_n, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter47, exitcond_flatten_fu_164_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter46)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((min_empty_n = ap_const_logic_0) or (max_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_164_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_flatten_fu_164_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state55;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state55 <= ap_CS_fsm(7);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(sim_data_stream_V_empty_n, nor_data_stream_V_full_n, gray_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_332, ap_enable_reg_pp0_iter47, ap_reg_pp0_iter46_exitcond_flatten_reg_332)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter47 = ap_const_logic_1) and (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 = ap_const_lv1_0) and (gray_data_stream_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter46_exitcond_flatten_reg_332 = ap_const_lv1_0) and (nor_data_stream_V_full_n = ap_const_logic_0)))) or ((exitcond_flatten_reg_332 = ap_const_lv1_0) and (sim_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(sim_data_stream_V_empty_n, nor_data_stream_V_full_n, gray_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_332, ap_enable_reg_pp0_iter47, ap_reg_pp0_iter46_exitcond_flatten_reg_332)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter47 = ap_const_logic_1) and (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 = ap_const_lv1_0) and (gray_data_stream_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter46_exitcond_flatten_reg_332 = ap_const_lv1_0) and (nor_data_stream_V_full_n = ap_const_logic_0)))) or ((exitcond_flatten_reg_332 = ap_const_lv1_0) and (sim_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(sim_data_stream_V_empty_n, nor_data_stream_V_full_n, gray_data_stream_V_full_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_332, ap_enable_reg_pp0_iter47, ap_reg_pp0_iter46_exitcond_flatten_reg_332)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter47 = ap_const_logic_1) and (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 = ap_const_lv1_0) and (gray_data_stream_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter46_exitcond_flatten_reg_332 = ap_const_lv1_0) and (nor_data_stream_V_full_n = ap_const_logic_0)))) or ((exitcond_flatten_reg_332 = ap_const_lv1_0) and (sim_data_stream_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, max_empty_n, min_empty_n)
    begin
                ap_block_state1 <= ((min_empty_n = ap_const_logic_0) or (max_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state54_pp0_stage0_iter47_assign_proc : process(nor_data_stream_V_full_n, gray_data_stream_V_full_n, ap_reg_pp0_iter46_exitcond_flatten_reg_332)
    begin
                ap_block_state54_pp0_stage0_iter47 <= (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 = ap_const_lv1_0) and (gray_data_stream_V_full_n = ap_const_logic_0)) or ((ap_reg_pp0_iter46_exitcond_flatten_reg_332 = ap_const_lv1_0) and (nor_data_stream_V_full_n = ap_const_logic_0)));
    end process;

        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state8_pp0_stage0_iter1_assign_proc : process(sim_data_stream_V_empty_n, exitcond_flatten_reg_332)
    begin
                ap_block_state8_pp0_stage0_iter1 <= ((exitcond_flatten_reg_332 = ap_const_lv1_0) and (sim_data_stream_V_empty_n = ap_const_logic_0));
    end process;

        ap_block_state9_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state7_assign_proc : process(exitcond_flatten_fu_164_p2)
    begin
        if ((exitcond_flatten_fu_164_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46)
    begin
        if (((ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_flatten_fu_164_p2 <= "1" when (indvar_flatten_reg_130 = ap_const_lv19_54600) else "0";

    gray_data_stream_V_blk_n_assign_proc : process(gray_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter47, ap_reg_pp0_iter46_exitcond_flatten_reg_332)
    begin
        if (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1))) then 
            gray_data_stream_V_blk_n <= gray_data_stream_V_full_n;
        else 
            gray_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    gray_data_stream_V_din <= 
        p_Val2_i_i_i_fu_305_p2 when (p_Result_s_reg_372(0) = '1') else 
        tmp_7_reg_377;

    gray_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter47, ap_reg_pp0_iter46_exitcond_flatten_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gray_data_stream_V_write <= ap_const_logic_1;
        else 
            gray_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_151_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state55)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state1) or ((ap_const_boolean_1 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_151_ce <= ap_const_logic_0;
        else 
            grp_fu_151_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_151_p0_assign_proc : process(ap_block_pp0_stage0, max_read_reg_317, tmp_i_i_reg_341, ap_enable_reg_pp0_iter2, ap_CS_fsm_state2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_151_p0 <= tmp_i_i_reg_341;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_151_p0 <= max_read_reg_317;
        else 
            grp_fu_151_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_155_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_155_ce <= ap_const_logic_1;
        else 
            grp_fu_155_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_160_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_160_ce <= ap_const_logic_1;
        else 
            grp_fu_160_ce <= ap_const_logic_0;
        end if; 
    end process;

    indvar_flatten_next_fu_170_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_130) + unsigned(ap_const_lv19_1));
    isNeg_fu_225_p3 <= sh_assign_fu_219_p2(11 downto 11);
    loc_V_1_fu_197_p1 <= p_Val2_s_fu_176_p1(52 - 1 downto 0);
    loc_V_fu_187_p4 <= p_Val2_s_fu_176_p1(62 downto 52);

    max_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, max_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_blk_n <= max_empty_n;
        else 
            max_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    max_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, max_empty_n, min_empty_n)
    begin
        if ((not(((min_empty_n = ap_const_logic_0) or (max_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            max_read <= ap_const_logic_1;
        else 
            max_read <= ap_const_logic_0;
        end if; 
    end process;


    min_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, min_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            min_blk_n <= min_empty_n;
        else 
            min_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    min_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, max_empty_n, min_empty_n)
    begin
        if ((not(((min_empty_n = ap_const_logic_0) or (max_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            min_read <= ap_const_logic_1;
        else 
            min_read <= ap_const_logic_0;
        end if; 
    end process;


    nor_data_stream_V_blk_n_assign_proc : process(nor_data_stream_V_full_n, ap_block_pp0_stage0, ap_enable_reg_pp0_iter47, ap_reg_pp0_iter46_exitcond_flatten_reg_332)
    begin
        if (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1))) then 
            nor_data_stream_V_blk_n <= nor_data_stream_V_full_n;
        else 
            nor_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    nor_data_stream_V_din <= ap_reg_pp0_iter46_tmp_1_reg_356;

    nor_data_stream_V_write_assign_proc : process(ap_enable_reg_pp0_iter47, ap_reg_pp0_iter46_exitcond_flatten_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((ap_reg_pp0_iter46_exitcond_flatten_reg_332 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            nor_data_stream_V_write <= ap_const_logic_1;
        else 
            nor_data_stream_V_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_i_i_i_fu_305_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(tmp_7_reg_377));
    p_Val2_s_fu_176_p1 <= x_assign_reg_367;
    sh_assign_1_fu_243_p3 <= 
        tmp_59_i_i_cast_i_fu_239_p1 when (isNeg_fu_225_p3(0) = '1') else 
        sh_assign_fu_219_p2;
        sh_assign_1_i_i_cast_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_assign_1_fu_243_p3),32));

    sh_assign_fu_219_p2 <= std_logic_vector(signed(ap_const_lv12_C01) + signed(tmp_i_i_i_cast_i_fu_215_p1));

    sim_data_stream_V_blk_n_assign_proc : process(sim_data_stream_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_332)
    begin
        if (((exitcond_flatten_reg_332 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sim_data_stream_V_blk_n <= sim_data_stream_V_empty_n;
        else 
            sim_data_stream_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    sim_data_stream_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_332, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_332 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            sim_data_stream_V_read <= ap_const_logic_1;
        else 
            sim_data_stream_V_read <= ap_const_logic_0;
        end if; 
    end process;

    tmp_19_fu_275_p3 <= tmp_61_i_i_i_fu_263_p2(53 downto 53);
        tmp_59_i_i_cast_i_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_59_i_i_i_fu_233_p2),12));

    tmp_59_i_i_i_fu_233_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(loc_V_fu_187_p4));
    tmp_5_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_275_p3),8));
    tmp_60_i_i_cast_i_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_i_i_cast_fu_251_p1),54));
    tmp_60_i_i_i_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sh_assign_1_i_i_cast_fu_251_p1),137));
    tmp_61_i_i_i_fu_263_p2 <= std_logic_vector(shift_right(unsigned(tmp_i_i_i_fu_201_p4),to_integer(unsigned('0' & tmp_60_i_i_cast_i_fu_259_p1(31-1 downto 0)))));
    tmp_62_i_i_i_fu_269_p2 <= std_logic_vector(shift_left(unsigned(tmp_i_i_cast_i_fu_211_p1),to_integer(unsigned('0' & tmp_60_i_i_i_fu_255_p1(31-1 downto 0)))));
    tmp_6_fu_287_p4 <= tmp_62_i_i_i_fu_269_p2(60 downto 53);
    tmp_7_fu_297_p3 <= 
        tmp_5_fu_283_p1 when (isNeg_fu_225_p3(0) = '1') else 
        tmp_6_fu_287_p4;
    tmp_i_i_cast_i_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_i_fu_201_p4),137));
    tmp_i_i_i_cast_i_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(loc_V_fu_187_p4),12));
    tmp_i_i_i_fu_201_p4 <= ((ap_const_lv1_1 & loc_V_1_fu_197_p1) & ap_const_lv1_0);
end behav;
